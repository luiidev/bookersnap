/**
 * Created by BS on 12/08/2016.
 */

angular.module('master.app', [
        'category.app',
        'microsite.app',
        'microportal.app',
        'role.app',
        'auth.app',
        'api.admin'
    ])
    .constant("ApiAdminROOT", 'http://localhost:90/v1/es')
    .constant("UrlApiAdmin", 'http://localhost:90/v1/es');
/**
 * Created by BS on 12/08/2016.
 */

angular.module('master.app')
    //----------------------------------------------
    // REALIZAR PETICIONES AJAX
    //----------------------------------------------
    .service('Ajax', function ($http) {
        return {
            Req: function (method, url, data, listener) {
                if (listener.BeforeSend != null && listener.BeforeSend != undefined) {
                    listener.BeforeSend();
                }
                switch (method) {
                    case "get":
                        $http.get(url, data).then(OnSuccess, OnError);
                        break;
                    case "post":
                        $http.post(url, data).then(OnSuccess, OnError);
                        break;
                    case "put":
                        $http.put(url, data).then(OnSuccess, OnError);
                        break;
                    case "delete":
                        $http.delete(url, data).then(OnSuccess, OnError);
                        break;
                    case "patch":
                        $http.patch(url, data).then(OnSuccess, OnError);
                        break;
                    case "$get":
                        jqueryAjax('get', url, data);
                        break;
                    case "$post":
                        jqueryAjax('post', url, data);
                        break;
                    case "$put":
                        jqueryAjax('put', url, data);
                        break;
                    case "$delete":
                        jqueryAjax('delete', url, data);
                        break;
                    case "$patch":
                        jqueryAjax('patch', url, data);
                        break;
                }

                function OnSuccess(response) {
                    if (listener.OnSuccess != null && listener.OnSuccess != undefined) {
                        listener.OnSuccess(response);
                    }
                }

                function OnError(response) {
                    if (listener.OnError != null && listener.OnError != undefined) {
                        listener.OnError(response);
                    }
                }

                function jqueryAjax(method, url, data) {
                    $.ajax({
                        url: url,
                        method: method,
                        type: 'json',
                        data: (data == null ? null : JSON.stringify(data)),
                        contentType: 'application/json'
                    }).done(function (data, textStatus, jqXHR) {
                        Response = {data: data, status: jqXHR.status};
                        OnSuccess(Response);
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        var data = {};
                        if (!angular.isUndefined(jqXHR.responseJSON)) {
                            data = jqXHR.responseJSON;
                        }
                        Response = {data: data, status: jqXHR.status};
                        OnError(Response);
                    });
                }
            }
        }
    })
    //----------------------------------------------
    // ABRIR MODALES
    //----------------------------------------------
    .service('Modal', function ($uibModal) {
        return {
            Open: function (size, tplUrl, ctrl, data, backdrop, finnaly) {
                if (backdrop == null || backdrop == undefined) {
                    backdrop = true;
                }
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: tplUrl,
                    controller: ctrl,
                    controllerAs: 'vm',
                    size: size,
                    backdrop: backdrop,
                    keyboard: false,
                    resolve: {
                        data: function () {
                            return data;
                        }
                    }
                });

                modalInstance.result.then(function (selectedItem) {
                    //$scope.selected = selectedItem;
                }, function () {
                    if (!angular.isUndefined(finnaly)) {
                        finnaly();
                    }
                });
            },
            OpenTpl: function (size, tpl, ctrl, data, backdrop, finnaly) {
                if (backdrop == null || backdrop == undefined) {
                    backdrop = true;
                }
                var modalInstance = $uibModal.open({
                    animation: true,
                    template: tpl,
                    controller: ctrl,
                    controllerAs: 'vm',
                    size: size,
                    backdrop: backdrop,
                    keyboard: false,
                    resolve: {
                        data: function () {
                            return data;
                        }
                    }
                });

                modalInstance.result.then(function (selectedItem) {
                    //$scope.selected = selectedItem;
                }, function () {
                    if (!angular.isUndefined(finnaly)) {
                        finnaly();
                    }
                });
            },
        }
    })
    //----------------------------------------------
    // ESCUCHAR EVENTOS DE ANGULAR
    //----------------------------------------------
    .service('EventListener', function ($rootScope) {
        return {
            broadcast: function(action, data){
                $rootScope.$broadcast(action, data);
            },
            emit: function (action, data) {
                $rootScope.$emit(action, data);
            },
            receive: function (action, func) {
                $rootScope.$on(action, function (event, data) {
                    func(data);
                });
            }
        }
    });
//MODULO PARA LA PROTECCION DE RUTAS. SE PODRIA PONER AL MISMO NIVEL QUE EL RESTO DE LAS APLICACIONES
//COMO UNA PEQUEÃ‘A APLICACION, PARA QUE EL RESTO DE APLICACIONES CONSUMAN ESTE MODULO.
angular.module('auth.app', ['mm.acl'])
    //-----------------------------------------------
    // SE ESTABLECE EL ACL
    //-----------------------------------------------
    .run(function(AclService, PrivilegeService, $rootScope, $state, $http) {
        setAuthHeaders($http);
        AclService.setAbilities(PrivilegeService.GetAcl());
        // Attach the member role to the current user
        AclService.attachRole(PrivilegeService.GetRole());

        $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {
            if (error === 'Unauthorized') {
                $state.go('access-denied');
            }
        });
    })
    //-----------------------------------------------
    // RUTAS DE AUTH
    //-----------------------------------------------
    .config(function($stateProvider) {
        $stateProvider
            .state('access-denied', {
                url: '/denied',
                templateUrl: '/js/app/master/auth/view/denied.html'
            });
    });
/**
 * Created by BS on 23/08/2016.
 */

angular.module('auth.app')
    //-----------------------------------------------
    // SERVICIO DE ACCESO
    //-----------------------------------------------
    .service('AccessService', function() {
        this.check = function($q, AclService, $action) {
            if (AclService.can($action)) {
                return true;
            } else {
                return $q.reject('Unauthorized');
            }
        };
    });
angular.module('category.app', ['category.controller', 'category.service'])
    .config(function ($stateProvider) {
        $stateProvider
            .state ('category', {
                url: '/category',
                templateUrl: '/js/app/master/category/view/index.html',
                controller: 'CategoryListController',
                controllerAs: 'vm',
                resolve: {
                    'acl': function ($q, AclService, AccessService) {
                        return AccessService.check($q, AclService, 'categories-manage');
                    }
                }
            })
            .state ('category-add', {
                url: '/category/add',
                templateUrl: '/js/app/master/category/view/category-create.html',
                controller: 'CategoryCreateController',
                controllerAs: 'vm',
                resolve: {
                    'acl': function ($q, AclService, AccessService) {
                        return AccessService.check($q, AclService, 'categories-manage');
                    }
                }
            })
            .state ('category-update', {
                url: '/category/update/:id',
                templateUrl: '/js/app/master/category/view/category-update.html',
                controller: 'CategoryUpdateController',
                controllerAs: 'vm',
                resolve: {
                    'acl': function ($q, AclService, AccessService) {
                        return AccessService.check($q, AclService, 'categories-manage');
                    }
                }
            })

    });
/**
 * Created by BS on 12/08/2016.
 */
angular.module('category.controller', ['ngFileUpload', 'ngImgCrop', 'angucomplete-alt', 'bsLoadingOverlay'])
    .run(function (bsLoadingOverlayService) {
        bsLoadingOverlayService.setGlobalConfig({
            delay: 0, // Minimal delay to hide loading overlay in ms.
            activeClass: undefined, // Class that is added to the element where bs-loading-overlay is applied when the overlay is active.
            templateUrl: 'overlay-template.html', // Template url for overlay element. If not specified - no overlay element is created.
            templateOptions: undefined // Options that are passed to overlay template (specified by templateUrl option above).
        });
    })
    //-----------------------------------
    // LISTA DE CATEGORIAS
    //-----------------------------------
    .
    controller('CategoryListController', function (CategoryListService, ngTableParams, $filter, bsLoadingOverlayService) {

        var vm = this;
        vm.categorias = [];
        vm.flags = {};
        vm.flags.isLoading = false;
        vm.dirCategoryLogo = '/files/categories/image/80x80/';
        vm.categoryListListener = GetListCategoryListener();
        vm.$onInit = fn_onInit();

        function fn_onInit() {
            CategoryListService.GetList(vm.categoryListListener);
        }

        vm.deleteCategory = function (id) {
            swal({
                title: "Confimar",
                text: "Se va eliminar la categorÃ­a",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "SÃ­, borrar ahora",
                cancelButtonText: "No, cancelar",
                closeOnConfirm: true,
                closeOnCancel: true
            }, function (isConfirm) {
                if (isConfirm) {
                    CategoryListService.DeleteCategory(id, {
                        BeforeSend: function () {
                            showOverlay(true);
                        },
                        OnSuccess: function (Response) {
                            showOverlay(false);
                            var data = Response.data;
                            CategoryListService.GetList(vm.categoryListListener);
                            swal("Borrada!", "La categorÃ­a ha sido eliminada", "success");
                        },
                        OnError: function (Response) {
                            showOverlay(false);
                            try {
                                swal("Error", "OcurriÃ³ un error al borrar la categorÃ­a", "error");
                            } catch ($e) {
                                swal("Error", "OcurriÃ³ un error en el servidor", "error");
                            }
                        }
                    });
                }
            });

        }

        function GetListCategoryListener() {
            return {
                BeforeSend: function () {
                    vm.now = fn_now();
                    vm.flags.isLoading = true;
                    showOverlay(vm.flags.isLoading);
                },
                OnSuccess: function (Response) {
                    vm.flags.isLoading = false;
                    showOverlay(vm.flags.isLoading);
                    var data = Response.data.data;
                    vm.categorias = data;
                    //vm.pagination = data.pagination;
                    initDataTable();
                },
                OnError: function (Response) {
                    vm.flags.isLoading = false;
                    showOverlay(vm.flags.isLoading);
                }
            };
        }

        function initDataTable() {
            var data = vm.categorias;
            vm.categoryTable = new ngTableParams({
                page: 1,            // show first page
                count: 5
            }, {
                total: data.length, // length of data
                getData: function ($defer, params) {
                    // use build-in angular filter
                    var orderedData = params.filter() ? $filter('filter')(data, params.filter()) : data;

                    this.id = orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count());
                    this.name = orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count());
                    this.email = orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count());
                    this.username = orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count());
                    this.contact = orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count());

                    params.total(orderedData.length); // set total for recalc pagination
                    $defer.resolve(this.id, this.name, this.email, this.username, this.contact);
                }
            })
        }

        function fn_now() {
            return new Date().getTime();
        }

        function showOverlay(bool) {
            if (bool) {
                bsLoadingOverlayService.start();
            } else {
                bsLoadingOverlayService.stop();
            }
        }

    })
    //-----------------------------------
    // CREAR CATEGORIAS
    //-----------------------------------
    .controller('CategoryCreateController', function (CategoryCreateService, Upload, $state, bsLoadingOverlayService) {
        var vm = this;
        vm.croppedLogo = {cropWidth: 100, cropHeight: 100, cropTop: 0, cropLeft: 10};
        vm.croppedFavicon = {cropWidth: 100, cropHeight: 100, cropTop: 0, cropLeft: 10};
        vm.categoria = {status: 1};
        vm.flags = {
            uploadingFavicon: false,
            uploadingLogo: false
        };
        init();

        vm.onSelectSubCategory = function (item) {
            if (item.originalObject == null) {
                return false;
            }
            if (angular.isString(item.originalObject)) {
                if (item.originalObject == "") {
                    return false;
                }
                var subCategoria = {name: item.originalObject};
            } else {
                var subCategoria = item.originalObject;
            }

            if (angular.isUndefined(vm.categoria.subcategories)) {
                vm.categoria.subcategories = [];
            }

            if (!isNameInSubCategorys(subCategoria.name)) {
                vm.categoria.subcategories.push(subCategoria);
            }
        };

        vm.UploadImageLogo = function (file) {
            if (file == null) {
                messageAlert("Logo", "Seleccione imagen mayor a 300px x 300px", "warning");
                delete vm.file_image_logo;
            }
            var url = CategoryCreateService.GetUrlUploadImgLogo();
            vm.flags.uploadingLogo = true;
            uploadImage(vm.file_image_logo, url, {
                success: function (Response) {
                    vm.flags.uploadingLogo = false;
                    vm.categoria.image_logo = Response.data.basename;
                    vm.categoria.image_logo_fullname = Response.data.fullname;
                },
                error: function (Response) {
                    vm.flags.uploadingLogo = false;
                    vm.clearImageLogo();
                },
                progress: function (evt) {

                }
            });
        };

        vm.UploadImageFavicon = function (file) {
            if (file == null) {
                messageAlert("Favicon", "Seleccione imagen mayor a 300px x 300px", "warning");
                delete vm.file_image_favicon;
            }
            var url = CategoryCreateService.GetUrlUploadImgFavicon();
            vm.flags.uploadingFavicon = true;
            uploadImage(vm.file_image_favicon, url, {
                success: function (Response) {
                    vm.flags.uploadingFavicon = false;
                    vm.categoria.image_favicon = Response.data.basename;
                    vm.categoria.image_favicon_fullname = Response.data.fullname;
                },
                error: function (Response) {
                    vm.flags.uploadingFavicon = false;
                    vm.clearImageFavicon();
                },
                progress: function (evt) {

                }
            });
        };

        vm.clearImageLogo = function () {
            delete vm.file_image_logo;
            delete vm.croppedImageLogoDataUrl;
        };

        vm.clearImageFavicon = function () {
            delete vm.file_image_favicon;
            delete vm.croppedImageFaviconDataUrl;
        };

        vm.guardarCategoria = function () {
            if (vm.categoria.image_favicon == null || vm.categoria.image_logo == null) {
                swal('Faltan las imÃ¡genes', 'Seleccione la imagen de logo y el favicon', 'warning');
                return;
            }
            CategoryCreateService.SaveCategory(vm.categoria, {
                BeforeSend: function () {
                    showOverlay(true);
                },
                OnSuccess: function (Response) {
                    showOverlay(false);
                    messageAlert('CategorÃ­a creada', '', 'success');
                    $state.go('category');
                },
                OnError: function (Response) {
                    showOverlay(false);
                    try {
                        var data = Response.data;
                        if (Response.status == 422) {
                            var errors = '';
                            angular.forEach(Response.data.error.errors, function (error, key) {
                                errors += '\n- ' + error + '\n';
                            });
                            swal(Response.data.error.user_msg, errors, "error")
                        } else if (Response.status == 403 || Response.status == 401) {
                            swal('Acceso denegado', null, "error")
                        } else {
                            swal("Error", data.error.user_msg, "error")
                        }
                    } catch ($e) {
                        swal("Error", "OcurriÃ³ un error en el servidor", "error");
                    }

                }
            });
        };

        vm.removeSubCategory = function (item) {
            vm.categoria.subcategories.splice(vm.categoria.subcategories.indexOf(item), 1);
        };

        function isNameInSubCategorys(name) {
            var found = vm.categoria.subcategories.some(function (item) {
                return item.name == name;
            });
            return found;
        }

        function getSubcategories() {
            CategoryCreateService.GetListSubcategories({
                BeforeSend: function () {

                },
                OnSuccess: function (Response) {
                    var data = Response.data;
                    if (data.success) {
                        vm.listSubcategorys = data.data;
                    } else {
                        vm.listSubcategorys = [];
                    }
                },
                OnError: function (Response) {
                    vm.listSubcategorys = [];
                }
            });
        }

        function uploadImage(file, url, listener) {
            Upload.upload({
                url: url,
                data: {file: file}
            }).then(function (response) {
                listener.success(response);
            }, function (response) {
                listener.error(response);
            }, function (evt) {
                listener.progress(evt);
                //var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                //console.log('progress: ' + progressPercentage + '% ' + evt.config.data.file.name);
            });
        }

        function init() {
            getSubcategories();
        }

        function showOverlay(bool) {
            if (bool) {
                bsLoadingOverlayService.start();
            } else {
                bsLoadingOverlayService.stop();
            }
        }
    })
    //-----------------------------------
    // ACTUALIZAR CATEGORIAS
    //-----------------------------------
    .controller('CategoryUpdateController', function (CategoryUpdateService, Upload, $state, bsLoadingOverlayService, $stateParams) {
        var vm = this;
        vm.croppedLogo = {cropWidth: 100, cropHeight: 100, cropTop: 0, cropLeft: 10};
        vm.croppedFavicon = {cropWidth: 100, cropHeight: 100, cropTop: 0, cropLeft: 10};
        vm.urlImages = '/files/categories/image/';
        vm.flags = {
            uploadingFavicon: false,
            uploadingLogo: false
        };
        init();

        vm.onSelectSubCategory = function (item) {
            if (item.originalObject == null) {
                return false;
            }
            if (angular.isString(item.originalObject)) {
                if (item.originalObject == "") {
                    return false;
                }
                var subCategoria = {name: item.originalObject};
            } else {
                var subCategoria = item.originalObject;
            }

            if (angular.isUndefined(vm.categoria.subcategories)) {
                vm.categoria.subcategories = [];
            }

            if (!isNameInSubCategorys(subCategoria.name)) {
                vm.categoria.subcategories.push(subCategoria);
            }
        };

        vm.UploadImageLogo = function (file) {
            if (file == null) {
                messageAlert("Logo", "Seleccione imagen mayor a 300px x 300px", "warning");
                delete vm.file_image_logo;
            }
            var url = CategoryUpdateService.GetUrlUploadImgLogo();
            vm.flags.uploadingLogo = true;
            uploadImage(vm.file_image_logo, url, {
                success: function (Response) {
                    vm.flags.uploadingLogo = false;
                    vm.categoria.image_logo = Response.data.basename;
                    vm.categoria.image_logo_fullname = Response.data.fullname;
                },
                error: function (Response) {
                    vm.flags.uploadingLogo = false;
                    vm.clearImageLogo();
                },
                progress: function (evt) {

                }
            });
        };

        vm.UploadImageFavicon = function (file) {
            if (file == null) {
                messageAlert("Favicon", "Seleccione imagen mayor a 300px x 300px", "warning");
                delete vm.file_image_favicon;
            }
            var url = CategoryUpdateService.GetUrlUploadImgFavicon();
            vm.flags.uploadingFavicon = true;
            uploadImage(vm.file_image_favicon, url, {
                success: function (Response) {
                    vm.flags.uploadingFavicon = false;
                    vm.categoria.image_favicon = Response.data.basename;
                    vm.categoria.image_favicon_fullname = Response.data.fullname;
                },
                error: function (Response) {
                    vm.flags.uploadingFavicon = false;
                    vm.clearImageFavicon();
                },
                progress: function (evt) {

                }
            });
        };

        vm.clearImageLogo = function () {
            delete vm.file_image_logo;
            delete vm.croppedImageLogoDataUrl;
        };

        vm.clearImageFavicon = function () {
            delete vm.file_image_favicon;
            delete vm.croppedImageFaviconDataUrl;
        };

        vm.guardarCategoria = function () {
            if (vm.categoria.image_favicon == null || vm.categoria.image_logo == null) {
                swal('Faltan las imÃ¡genes', 'Seleccione la imagen de logo y el favicon', 'warning');
                return;
            }
            CategoryUpdateService.SaveCategory($stateParams.id, vm.categoria, {
                BeforeSend: function () {
                    showOverlay(true);
                },
                OnSuccess: function (Response) {
                    showOverlay(false);
                    messageAlert('CategorÃ­a actualizada', '', 'success');
                    $state.go('category');
                },
                OnError: function (Response) {
                    showOverlay(false);
                    try {
                        var data = Response.data;
                        if (Response.status == 422) {
                            var errors = '';
                            angular.forEach(Response.data.error.errors, function (error, key) {
                                errors += '\n- ' + error + '\n';
                            });
                            swal(Response.data.error.user_msg, errors, "error")
                        } else if (Response.status == 403 || Response.status == 401) {
                            swal('Acceso denegado', null, "error")
                        } else {
                            swal("Error", data.error.user_msg, "error")
                        }
                    } catch ($e) {
                        swal("Error", "OcurriÃ³ un error en el servidor", "error");
                    }

                }
            });
        };

        vm.removeSubCategory = function (item) {
            vm.categoria.subcategories.splice(vm.categoria.subcategories.indexOf(item), 1);
        };

        function isNameInSubCategorys(name) {
            var found = vm.categoria.subcategories.some(function (item) {
                return item.name == name;
            });
            return found;
        }

        function getSubcategories() {
            CategoryUpdateService.GetListSubcategories({
                BeforeSend: function () {

                },
                OnSuccess: function (Response) {
                    var data = Response.data;
                    if (data.success) {
                        vm.listSubcategorys = data.data;
                    } else {
                        vm.listSubcategorys = [];
                    }
                },
                OnError: function (Response) {
                    vm.listSubcategorys = [];
                }
            });
        }

        function getCategory() {
            CategoryUpdateService.GetCategory($stateParams.id, {
                BeforeSend: function () {
                    showOverlay(true);
                },
                OnSuccess: function (Response) {
                    showOverlay(false);
                    vm.categoria = Response.data.data;
                    vm.file_image_favicon = vm.urlImages + '/80x80/' + vm.categoria.image_favicon;
                    vm.file_image_logo = vm.urlImages + '/160x160/' + vm.categoria.image_logo;
                },
                OnError: function (Response) {
                    showOverlay(false);
                    try {
                        var data = Response.data;
                        swal("Error", data.error.user_msg, "error");
                    } catch ($e) {
                        swal("Error", "OcurriÃ³ un error en el servidor", "error");
                    }
                }
            });
        }

        function uploadImage(file, url, listener) {
            Upload.upload({
                url: url,
                data: {file: file}
            }).then(function (response) {
                listener.success(response);
            }, function (response) {
                listener.error(response);
            }, function (evt) {
                listener.progress(evt);
                //var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                //console.log('progress: ' + progressPercentage + '% ' + evt.config.data.file.name);
            });
        }

        function init() {
            getCategory();
            getSubcategories();
        }

        function showOverlay(bool) {
            if (bool) {
                bsLoadingOverlayService.start();
            } else {
                bsLoadingOverlayService.stop();
            }
        }
    });


/**
 * Created by BS on 12/08/2016.
 */
angular.module('category.service', [])
    .factory('CategoryListService', function (Ajax) {
        return {
            GetList: function ($listener) {
                Ajax.Req('get', '/master/ajax/category', {}, $listener);
            },
            DeleteCategory: function ($id, $listener) {
                Ajax.Req('delete', '/master/ajax/category/' + $id, {}, $listener);
            }
        }
    })
    .factory('CategoryCreateService', function (Ajax) {
        return {
            GetUrlUploadImgLogo: function () {
                return '/master/ajax/category/upload/logo';
            },
            GetUrlUploadImgFavicon: function () {
                return '/master/ajax/category/upload/favicon';
            },
            GetListSubcategories: function ($listener) {
                Ajax.Req('get', '/master/ajax/category/subcategories', {}, $listener);
            },
            SaveCategory: function ($data, $listener) {
                Ajax.Req('post', '/master/ajax/category/', $data, $listener);
            }
        }
    })
    .factory('CategoryUpdateService', function (Ajax) {
        return {
            GetUrlUploadImgLogo: function () {
                return '/master/ajax/category/upload/logo';
            },
            GetUrlUploadImgFavicon: function () {
                return '/master/ajax/category/upload/favicon';
            },
            GetCategory: function ($id, $listener) {
                Ajax.Req('get', '/master/ajax/category/' + $id, {}, $listener);
            },
            GetListSubcategories: function ($listener) {
                Ajax.Req('get', '/master/ajax/category/subcategories', {}, $listener);
            },
            SaveCategory: function ($id, $data, $listener) {
                Ajax.Req('put', '/master/ajax/category/' + $id, $data, $listener);
            }
        }
    });
angular.module('microsite.app', ['microsite.controller', 'microsite.service'])
    .config(function($stateProvider) {
        $stateProvider
            .state('microsite-list', {
                url: '/microsite',
                views: {
                    '': {
                        templateUrl: '/js/app/master/microsite/view/microsite-index.html',
                    },
                    'ms@microsite-list': {
                        templateUrl: '/js/app/master/microsite/view/microsite-list.html',
                        controller: 'MicrositeListController',
                        controllerAs: 'vm',
                    },
                    'mp@microsite-list': {
                        templateUrl: '/js/app/master/microportal/view/microportal-list.html',
                        controller: 'MicroportalListController',
                        controllerAs: 'vm'
                    }
                },
                resolve: {
                    'acl': function($q, AclService, AccessService) {
                        return AccessService.check($q, AclService, 'microsites-manage');
                    }
                }
            })
            .state('microsite-add', {
                url: '/microsite/add',
                templateUrl: '/js/app/master/microsite/view/microsite-create.html',
                controller: 'MicrositeCreateController',
                controllerAs: 'vm',
                resolve: {
                    'acl': function($q, AclService, AccessService) {
                        return AccessService.check($q, AclService, 'microsites-manage');
                    }
                }
            });
    });
/**
 * Created by BS on 12/08/2016.
 */
angular.module('microsite.controller', ['bsLoadingOverlay', 'daterangepicker', 'ngMap'])
    .run(function (bsLoadingOverlayService) {
        bsLoadingOverlayService.setGlobalConfig({
            delay: 0, // Minimal delay to hide loading overlay in ms.
            activeClass: undefined, // Class that is added to the element where bs-loading-overlay is applied when the overlay is active.
            templateUrl: 'overlay-template.html', // Template url for overlay element. If not specified - no overlay element is created.
            templateOptions: undefined // Options that are passed to overlay template (specified by templateUrl option above).
        });
    })
    //----------------------------------------------
    // LISTA MICROSITIOS
    //----------------------------------------------
    .controller('MicrositeListController', function (MicrositeService, bsLoadingOverlayService) {
        var vm = this;
        vm.flagDateTimeChange = 0;
        vm.orderVisits = 'desc';
        vm.pagination = {
            page: 1,
            page_size: 5,
            total: 0,
            items: []
        };

        vm.flags = {
            serverError: false,
            isLoading: false
        };

        vm.filters = {
            name: "",
            domain: "",
            category: "",
            subcategory: ""
        };

        vm.urlImgMs = '/files/microsites/image/80x80/';
        vm.urlImgCategory = '/files/categories/image/80x80/';

        vm.listarMicrositios = function () {
            var data = buildData();
            console.log(data);
            data.dateRange.startDate = moment(data.dateRange.startDate).format("YYYY-MM-DD");
            data.dateRange.endDate = moment(data.dateRange.endDate).format("YYYY-MM-DD");
            console.log(data);
            MicrositeService.GetPage(data, {
                BeforeSend: function () {
                    vm.flags.isLoading = true;
                    bsLoadingOverlayService.start();
                },
                OnSuccess: function (Response) {
                    vm.flags.isLoading = false;
                    bsLoadingOverlayService.stop();
                    var data = Response.data;
                    vm.pagination = data.data;
                },
                OnError: function (Response) {
                    vm.flags.isLoading = false;
                    bsLoadingOverlayService.stop();
                    swal('Error', 'OcurriÃ³ un error en el servidor', 'error');
                }
            });
            if (vm.flagDateTimeChange == 0) {
                setCurrentDateDefault();
            }
        };

        vm.search = function () {
            vm.pagination.page = 1;
            vm.listarMicrositios();
        };

        vm.changePage = function () {
            vm.listarMicrositios();
        };

        vm.orderByVisit = function () {
            if (!vm.flags.isLoading) {
                if (vm.orderVisits == 'desc') {
                    vm.orderVisits = 'asc';
                } else {
                    vm.orderVisits = 'desc';
                }
                vm.pagination.page = 1;

                if (vm.flagDateTimeChange == 0) {
                    setCurrentDateTomorrow();
                }

                vm.listarMicrositios();
            }
        };

        function buildData() {
            var data = {
                page: vm.pagination.page,
                page_size: vm.pagination.page_size
            };
            if (vm.filters.name.trim().length > 0
                || vm.filters.domain.trim().length > 0
                || vm.filters.category.trim().length > 0
                || vm.filters.subcategory.trim().length > 0
            ) {
                data.filters = vm.filters;
            }
            if (vm.flagDateTimeChange == 0) {
                setCurrentDateTomorrow();
            }
            data.dateRange = vm.count_filter_selected;
            data.orderVisits = vm.orderVisits;
            return data;
        }

        function init_dates() {
            vm.dates = {};
            vm.dates.origin_date = new Date(2015, 1, 1);
            vm.dates.current_date = new Date();
            vm.dates.current_time = vm.dates.current_date.getTime();
            vm.dates.current_dayweek = vm.dates.current_date.getDay();
            vm.dates.current_year = vm.dates.current_date.getFullYear();
            vm.dates.current_month = vm.dates.current_date.getMonth();
            vm.dates.current_day = vm.dates.current_date.getDate();
            vm.dates.dayWeekIni_time = vm.dates.current_time - (vm.dates.current_dayweek) * 24 * 3600000;
            vm.dates.dayWeekIni_date = new Date(vm.dates.dayWeekIni_time);
            vm.dates.last7day_time = vm.dates.current_time - 6 * 24 * 3600000;
            vm.dates.last7day_date = new Date(vm.dates.last7day_time);
            vm.dates.last30day_time = vm.dates.current_time - 30 * 24 * 3600000;
            vm.dates.last30day_date = new Date(vm.dates.last30day_time);
            vm.dates.dayMontIni_date = new Date(vm.dates.current_year, vm.dates.current_month, 1);
            vm.dates.dayMontIni_time = vm.dates.dayMontIni_date.getTime();
            vm.dates.lastMont_timeend = vm.dates.dayMontIni_time - 1 * 24 * 3600000;
            vm.dates.lastMont_dateend = new Date(vm.dates.lastMont_timeend);
            if (vm.dates.current_month > 0) {
                vm.dates.lastMont_date = new Date(vm.dates.current_year, vm.dates.current_month - 1, 1);
            } else {
                vm.dates.lastMont_date = new Date(vm.dates.current_year - 1, 12, 1);
            }
            var aux = new Date();
            setCurrentDateTomorrow();

            vm.datepickerOptions = {
                'opens': 'left',
                'showDropdowns': true,
                'autoApply': true,
                'ranges': {
                    'Hoy': [vm.dates.current_date, vm.dates.current_date],
                    'Esta semana': [vm.dates.dayWeekIni_date, vm.dates.current_date],
                    'Ultimos 7 dias': [vm.dates.last7day_date, vm.dates.current_date],
                    'Ultimos 30 dias': [vm.dates.last30day_date, vm.dates.current_date],
                    'Este mes': [vm.dates.dayMontIni_date, vm.dates.current_date],
                    'Mes pasado': [vm.dates.lastMont_date, vm.dates.lastMont_dateend],
                    'Origen del tiempo': [vm.dates.origin_date, vm.dates.current_date]
                },
                'locale': {
                    'format': 'DD/MM/YYYY',
                    'separator': ' - ',
                    'applyLabel': 'aplicar',
                    'cancelLabel': 'cancel',
                    'fromLabel': 'Desde',
                    'toLabel': 'Hasta',
                    'customRangeLabel': 'Rango de fechas',
                    'daysOfWeek': [
                        'Do', 'Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'Sa'
                    ],
                    'monthNames': [
                        'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
                    ],
                    'firstDay': 1
                },
                'startDate': vm.dates.dayWeekIni_date,
                'endDate': vm.dates.current_date,
                'minDate': vm.dates.origin_date,
                'maxDate': vm.dates.current_date - 24 * 3600000,
                eventHandlers: {
                    'apply.daterangepicker': function (ev, picker) {
                        if (vm.flagDateTimeChange == 0) {
                            vm.flagDateTimeChange = 1;
                        }
                        vm.listarMicrositios();
                        //pendiente para integracion con node js
                        //fn_loadMicrositeCounters();
                    }
                }
            };

            var isSameDay = function (date, otherDate) {
                return date.toDateString() === otherDate.toDateString();
            };
        }

        function fn_loadMicrositeCounters() {
            if (vm.flagDateTimeChange == 0) {
                setCurrentDateTomorrow();
            }
            Ajax.Req("post", "/ajax/ms-microsite/counters", {count_range: vm.count_filter_selected}, vm.micrositeCounterListener);

            if (vm.flagDateTimeChange == 0) {
                setCurrentDateDefault();
            }
        }

        //------------------------------------
        // FIX PARA ANGULAR DATE RANGE PICKER
        //------------------------------------
        function setCurrentDateTomorrow() {
            var aux = new Date();
            vm.count_filter_selected = {
                startDate: vm.dates.dayWeekIni_date,
                endDate: new Date(new Date().setDate(aux.getDate() + 1))
            };

        }

        function setCurrentDateDefault() {
            vm.count_filter_selected = {
                startDate: vm.dates.dayWeekIni_date,
                endDate: vm.dates.current_date
            };
        }

        //------------------------------------
        // INIT
        //------------------------------------

        function init() {
            init_dates();
            vm.listarMicrositios();
        }

        init();

    })
    //----------------------------------------------
    // CREAR MICROSITIOS
    //----------------------------------------------
    .controller('MicrositeCreateController', function (MicrositeService, bsLoadingOverlayService, Modal, NgMap, EventListener, $state) {
        var vm = this;
        vm.microsite = {
            ms_type: 1,
            site_name: '',
            categories: [{bs_category_id: null, bs_subcategory_id: null}],
            scores: [],
            localServices: [],
            bsServices: []
        };
        vm.startPosition = {lat: -12.142553, lng: -76.99104790000001};
        vm.countries = [];
        vm.categories = [];
        vm.subcategories = [];
        vm.classBtnAvailableSitename = "btn-default";
        vm.sitenameIcon = 'zmdi-refresh';

        vm.updateCities = function () {
            MicrositeService.GetCities(vm.microsite.bs_country_id, {
                BeforeSend: function () {

                },
                OnSuccess: function (Response) {
                    vm.cities = Response.data.data;
                },
                OnError: function (Response) {

                }
            });
        };

        vm.updateSubCategories = function ($index) {
            if (vm.microsite.categories[$index].bs_category_id == null) {
                vm.subcategories[$index] = [];
                return false;
            }
            if (countCategorySelected(vm.microsite.categories[$index].bs_category_id) > 1) {
                vm.microsite.categories[$index].bs_category_id = null;
                vm.subcategories[$index] = [];
                return false;
            }
            GetSubcategories($index);

        };

        vm.addCategory = function () {
            vm.microsite.categories.push({bs_category_id: null, bs_subcategory_id: null});
        };

        vm.editScores = function () {
            Modal.Open('', 'editScores.html',
                function (data, $uibModalInstance) {
                    var vm = this;
                    vm.scores = data.scores;
                    vm.close = function () {
                        $uibModalInstance.dismiss('cancel');
                    }
                }, {scores: vm.microsite.scores});
        };

        vm.editLocalServices = function () {
            Modal.Open('', 'editLocalServices.html',
                function (data, $uibModalInstance) {
                    var vm = this;
                    vm.services = data.services;
                    vm.close = function () {
                        $uibModalInstance.dismiss('cancel');
                    }
                }, {services: vm.microsite.localServices});
        };

        vm.editBsServices = function () {
            Modal.Open('', 'editBsServices.html',
                function (data, $uibModalInstance) {
                    var vm = this;
                    vm.services = data.services;
                    vm.close = function () {
                        $uibModalInstance.dismiss('cancel');
                    }
                }, {services: vm.microsite.bsServices});
        };

        vm.verifySitenameDisp = function () {
            if (vm.microsite.site_name.trim() == '') {
                return;
            }
            var $free = false;
            if (vm.microsite.ms_type == 2 || vm.microsite.ms_type == 3) {
                $free = true;
            }
            MicrositeService.CheckSitename(vm.microsite.site_name, $free, {
                BeforeSend: function () {

                },
                OnSuccess: function (Response) {
                    vm.classBtnAvailableSitename = "btn-success";
                    vm.sitenameIcon = 'zmdi-check';
                },
                OnError: function (Response) {
                    try {
                        vm.classBtnAvailableSitename = "btn-danger";
                        vm.sitenameIcon = 'zmdi-close';
                        if (Response.status == 406) {
                            var data = Response.data.data;
                            var $suggestions = '';
                            angular.forEach(data.suggestions, function (sugg) {
                                $suggestions += '\n- ' + sugg.sitename;
                            });
                            swal('No Disponible. Intenta con estos nombres:', $suggestions, 'error');
                        } else if (Response.status == 403 || Response.status == 401) {
                            swal('Acceso denegado', null, "error")
                        } else {
                            swal('Error', Response.data.error.user_msg, 'error');
                        }
                    } catch ($e) {
                        swal('Error', 'OcurriÃ³ un error en el servidor', 'error');
                    }
                }
            });
        };

        vm.register = function () {
            UpdateMapCoordinates();
            UpdateMicrositeType();
            MicrositeService.SaveMicrosite(vm.microsite, {
                BeforeSend: function () {
                    bsLoadingOverlayService.start();
                },
                OnSuccess: function (Response) {
                    bsLoadingOverlayService.stop();
                    try {
                        var data = Response.data;
                        if (data.success) {
                            messageAlert('Micrositio creado.', '', 'success');
                            $state.go('microsite-list');
                        }
                    } catch ($e) {
                        swal("Error", "OcurriÃ³ un error en el servidor", "error");
                    }
                },
                OnError: function (Response) {
                    bsLoadingOverlayService.stop();
                    try {
                        var data = Response.data;
                        if (Response.status == 422) {
                            var errors = '';
                            angular.forEach(Response.data.error.errors, function (error, key) {
                                errors += '\n- ' + error + '\n';
                            });
                            swal(Response.data.error.user_msg, errors, "error")
                        } else if (Response.status == 403 || Response.status == 401) {
                            swal('Acceso denegado', null, "error")
                        } else {
                            swal("Error", data.error.user_msg, "error")
                        }
                    } catch ($e) {
                        swal("Error", "OcurriÃ³ un error en el servidor", "error");
                    }
                }
            });
        };

        vm.removeCategory = function (item) {
            if (vm.microsite.categories.length > 1) {
                vm.microsite.categories.splice(vm.microsite.categories.indexOf(item), 1);
            }
        };

        function GetCountries() {
            MicrositeService.GetCountries({
                BeforeSend: function () {

                },
                OnSuccess: function (Response) {
                    vm.countries = Response.data.data;
                },
                OnError: function (Response) {

                }
            });
        }

        function GetCategories() {
            MicrositeService.GetCategories({
                BeforeSend: function () {

                },
                OnSuccess: function (Response) {
                    vm.categories = Response.data.data;
                },
                OnError: function (Response) {
                }
            });
        }

        function GetSubcategories(index) {
            MicrositeService.GetSubcategories(vm.microsite.categories[index].bs_category_id, {
                BeforeSend: function () {

                },
                OnSuccess: function (Response) {
                    vm.subcategories[index] = Response.data.data;
                },
                OnError: function (Response) {

                }
            });
        }

        function GetScores() {
            MicrositeService.GetScores({
                BeforeSend: function () {

                },
                OnSuccess: function (Response) {
                    vm.microsite.scores = Response.data.data;
                },
                OnError: function (Response) {
                }
            });
        }

        function GetLocalServices() {
            MicrositeService.GetLocalServices({
                BeforeSend: function () {

                },
                OnSuccess: function (Response) {
                    vm.microsite.localServices = Response.data.data;
                },
                OnError: function (Response) {
                }
            });
        }

        function GetBsServices() {
            MicrositeService.GetBsServices({
                BeforeSend: function () {

                },
                OnSuccess: function (Response) {
                    vm.microsite.bsServices = Response.data.data;
                },
                OnError: function (Response) {
                }
            });
        }

        function countCategorySelected(id) {
            var count = 0;
            for (var i in vm.microsite.categories) {
                if (vm.microsite.categories[i].bs_category_id == id) {
                    count++;
                }
            }
            return count;
        }

        function initializeMap() {
            vm.map = new google.maps.Map(document.getElementById('map'), {
                zoom: 16,
                center: vm.startPosition
            });
            var input = document.getElementById('searchbox')
            var searchBox = new google.maps.places.SearchBox(input);
            vm.map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
            vm.marker = fn_getMarker(vm.startPosition, '');
            searchBox.addListener('places_changed', fn_placeChanged);
        }

        function fn_getMarker(position, title) {
            return new google.maps.Marker({
                map: vm.map,
                draggable: true,
                title: title,
                animation: google.maps.Animation.BOUNCE,
                position: position
            });
        }

        function fn_placeChanged() {
            var places = this.getPlaces();
            // if (places.length == 0) {
            //     return;
            // }
            var bounds = new google.maps.LatLngBounds();
            var firstPlace = false;
            for (var i = 0, place; place = places[i]; i++) {
                if (firstPlace) {
                    break;
                }
                if (vm.marker) {
                    vm.marker.setMap(null);
                }
                vm.marker = fn_getMarker(place.geometry.location, place.name);
                //console.log(vm.marker);
                if (place.geometry.viewport) {
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
                firstPlace = true;
            }
            vm.map.setCenter(vm.marker.getPosition());
            vm.map.setZoom(16);

        }

        function OnChangeState() {
            EventListener.receive('$stateChangeStart', function () {
                if (vm.marker) {
                    vm.marker.setMap(null);
                }
            });
        }

        function LoadMap() {
            if (vm.marker) {
                vm.marker.setMap(null);
            }
            NgMap.getMap().then(function (map) {
                vm.map = map;
                vm.map.setCenter(vm.startPosition);
                var input = document.getElementById('searchbox');
                var searchBox = new google.maps.places.SearchBox(input);
                vm.map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
                vm.marker = fn_getMarker(vm.startPosition, '');
                searchBox.addListener('places_changed', fn_placeChanged);
            });
        }

        function UpdateMicrositeType() {

            switch (vm.microsite.ms_type) {
                case 1:
                    vm.microsite.free = false;
                    vm.microsite.status_claimed = 1;
                    break;
                case 2:
                    vm.microsite.free = true;
                    vm.microsite.status_claimed = 0;
                    break;
                case 3:
                    vm.microsite.free = true;
                    vm.microsite.status_claimed = 1;
                    break;
            }
        }

        function UpdateMapCoordinates() {
            vm.microsite.map_latitude = vm.marker.position.lat();
            vm.microsite.map_longitude = vm.marker.position.lng();
        }

        function init() {
            google.maps.event.addDomListener(window, 'load', initializeMap);
            GetCountries();
            GetCategories();
            GetScores();
            GetLocalServices();
            GetBsServices();
            LoadMap();
            OnChangeState();
        }

        init();
    })
angular.module('microsite.service', [])
    //--------------------------------------
    // SERVICIO LISTAR MICROSITIO
    //--------------------------------------
    .factory('MicrositeService', function(Ajax, UrlApiAdmin) {
        var base_url = '/master/ajax/';
        var api_admin_url = UrlApiAdmin;
        return {
            GetPage: function($data, $listener) {
                var $url = base_url + 'microsite';
                Ajax.Req('patch', $url, $data, $listener);
            },
            GetCountries: function($listener) {
                Ajax.Req('get', api_admin_url + 'country', null, $listener);
            },
            GetCities: function($country_id, $listener) {
                Ajax.Req('get', api_admin_url + 'country/' + $country_id + '/cities', null, $listener);
            },
            GetCategories: function($listener) {
                Ajax.Req('get', api_admin_url + 'category', null, $listener);
            },
            GetSubcategories: function($category_id, $listener) {
                Ajax.Req('get', api_admin_url + 'category/' + $category_id + '/subcategories', null, $listener);
            },
            GetScores: function($listener) {
                Ajax.Req('get', api_admin_url + 'scoretype', null, $listener);
            },
            GetLocalServices: function($listener) {
                Ajax.Req('get', api_admin_url + 'local-services', null, $listener);
            },
            GetBsServices: function($listener) {
                Ajax.Req('get', api_admin_url + 'bs-services', null, $listener);
            },
            CheckSitename: function($sitename, $msType, $listener) {
                var data = {
                    sitename: $sitename,
                    free: $msType
                };
                Ajax.Req('post', api_admin_url + 'microsite/sitename', data, $listener);
            },
            SaveMicrosite: function($data, $listener) {
                Ajax.Req('post', base_url + 'microsite', $data, $listener);
            }
        };
    });
angular.module('microportal.app', ['microportal.controller', 'microportal.service'])
    .config(function ($stateProvider) {
        $stateProvider
            .state ('microportal-add', {
                url: '/microportal/add',
                templateUrl: '/js/app/master/microportal/view/microportal-create.html',
                controller: 'MicroportalCreateController',
                controllerAs: 'vm',
                resolve: {
                    'acl': function ($q, AclService, AccessService) {
                        return AccessService.check($q, AclService, 'microportals-manage');
                    }
                }
            })
    });
/**
 * Created by BS on 12/08/2016.
 */
angular.module('microportal.controller', ['bsLoadingOverlay'])
    .run(function (bsLoadingOverlayService) {
        bsLoadingOverlayService.setGlobalConfig({
            delay: 0, // Minimal delay to hide loading overlay in ms.
            activeClass: undefined, // Class that is added to the element where bs-loading-overlay is applied when the overlay is active.
            templateUrl: 'overlay-template.html', // Template url for overlay element. If not specified - no overlay element is created.
            templateOptions: undefined // Options that are passed to overlay template (specified by templateUrl option above).
        });
    })
    //----------------------------------------------
    // LISTAR MICROPORTALES
    //----------------------------------------------
    .controller('MicroportalListController', function (MicroportalService, bsLoadingOverlayService) {
        var vm = this;
        vm.pagination = {
            page: 1,
            page_size: 5,
            total: 0,
            items: []
        };

        vm.flags = {
            serverError: false,
            isLoading: false
        };

        vm.filters = {
            name: "",
            domain: "",
            category: "",
            subcategory: ""
        };

        vm.urlImgMp = '/files/microportals/image/80x80/';
        vm.urlImgCategory = '/files/categories/image/80x80/';

        vm.listarMicroportales = function () {
            var data = buildData();
            MicroportalService.GetPage(data, {
                BeforeSend: function () {
                    vm.flags.isLoading = true;
                    bsLoadingOverlayService.start();
                },
                OnSuccess: function (Response) {
                    vm.flags.isLoading = false;
                    bsLoadingOverlayService.stop();
                    var data = Response.data;
                    vm.pagination = data.data;
                },
                OnError: function (Response) {
                    vm.flags.isLoading = false;
                    bsLoadingOverlayService.stop();
                    swal('Error', 'OcurriÃ³ un error en el servidor', 'error');
                }
            });
            if (vm.flagDateTimeChange == 0) {
                setCurrentDateDefault();
            }
        };

        vm.search = function () {
            vm.pagination.page = 1;
            vm.listarMicroportales();
        };

        vm.changePage = function () {
            vm.listarMicroportales();
        };

        function buildData() {
            var data = {
                page: vm.pagination.page,
                page_size: vm.pagination.page_size
            };
            if (vm.filters.name.trim().length > 0
                || vm.filters.domain.trim().length > 0
                || vm.filters.category.trim().length > 0
                || vm.filters.subcategory.trim().length > 0
            ) {
                data.filters = vm.filters;
            }

            return data;
        }

        //------------------------------------
        // INIT
        //------------------------------------

        function init() {
            vm.listarMicroportales();
        }

        init();

    })
    //----------------------------------------------
    // CREAR MICROPORTALES
    //----------------------------------------------
    .controller('MicroportalCreateController', function (MicroportalService, bsLoadingOverlayService, $state) {
        var vm = this;

        vm.microportal = {
            site_name: '',
            categories: [{bs_category_id: null, bs_subcategory_id: null}]
        };
        vm.countries = [];
        vm.categories = [];
        vm.subcategories = [];
        vm.classBtnAvailableSitename = "btn-default";
        vm.sitenameIcon = 'zmdi-refresh';

        vm.flags = {
            isProccessing: false
        };


        vm.updateCities = function () {
            MicroportalService.GetCities(vm.microportal.bs_country_id, {
                BeforeSend: function () {

                },
                OnSuccess: function (Response) {
                    vm.cities = Response.data.data;
                },
                OnError: function (Response) {

                }
            });
        };

        vm.OnCitySelected = function (item) {

            if (angular.isUndefined(item)) {
                vm.microportal.bs_city_id = null;
                return;
            }
            if (item.originalObject == null || item.originalObject == undefined) {
                vm.microportal.bs_city_id = null;
                return;
            }
            if (angular.isString(item.originalObject) && item.originalObject == "") {
                vm.microportal.bs_city_id = null;
                return;
            } else {
                vm.microportal.bs_city_id = item.originalObject.id;
            }
        };

        vm.updateSubCategories = function ($index) {
            if (vm.microportal.categories[$index].bs_category_id == null) {
                vm.subcategories[$index] = [];
                return false;
            }
            if (countCategorySelected(vm.microportal.categories[$index].bs_category_id) > 1) {
                vm.microportal.categories[$index].bs_category_id = null;
                vm.subcategories[$index] = [];
                return false;
            }
            GetSubcategories($index);

        };

        vm.addCategory = function () {
            vm.microportal.categories.push({bs_category_id: null, bs_subcategory_id: null});
        };

        vm.editScores = function () {
            Modal.Open('', 'editScores.html',
                function (data, $uibModalInstance) {
                    var vm = this;
                    vm.scores = data.scores;
                    vm.close = function () {
                        $uibModalInstance.dismiss('cancel');
                    }
                }, {scores: vm.microportal.scores});
        };

        vm.editLocalServices = function () {
            Modal.Open('', 'editLocalServices.html',
                function (data, $uibModalInstance) {
                    var vm = this;
                    vm.services = data.services;
                    vm.close = function () {
                        $uibModalInstance.dismiss('cancel');
                    }
                }, {services: vm.microportal.localServices});
        };

        vm.editBsServices = function () {
            Modal.Open('', 'editBsServices.html',
                function (data, $uibModalInstance) {
                    var vm = this;
                    vm.services = data.services;
                    vm.close = function () {
                        $uibModalInstance.dismiss('cancel');
                    }
                }, {services: vm.microportal.bsServices});
        };

        vm.verifySitenameDisp = function () {
            if (vm.microportal.site_name.trim() == '') {
                return;
            }
            MicroportalService.CheckSitename(vm.microportal.site_name, {
                BeforeSend: function () {

                },
                OnSuccess: function (Response) {
                    vm.classBtnAvailableSitename = "btn-success";
                    vm.sitenameIcon = 'zmdi-check';
                },
                OnError: function (Response) {
                    try {
                        vm.classBtnAvailableSitename = "btn-danger";
                        vm.sitenameIcon = 'zmdi-close';
                        if (Response.status == 406) {
                            var data = Response.data.data;
                            var $suggestions = '';
                            angular.forEach(data.suggestions, function (sugg) {
                                $suggestions += '\n-' + sugg.sitename;
                            });
                            swal('No Disponible. Intenta con estos nombres:', $suggestions, 'error');
                        } else if (Response.status == 403 || Response.status == 401) {
                            swal('Acceso denegado', null, "error")
                        } else {
                            swal('Error', Response.data.error.user_msg, 'error');
                        }
                    } catch ($e) {
                        swal('Error', 'OcurriÃ³ un error en el servidor', 'error');
                    }
                }
            });
        };

        vm.removeCategory = function (item) {
            if (vm.microportal.categories.length > 1) {
                vm.microportal.categories.splice(vm.microportal.categories.indexOf(item), 1);
            }
        };

        vm.register = function () {
            MicroportalService.SaveMicroportal(vm.microportal, {
                BeforeSend: function () {
                    vm.flags.isProccessing = true;
                    bsLoadingOverlayService.start();
                },
                OnSuccess: function (Response) {
                    vm.flags.isProccessing = false;
                    bsLoadingOverlayService.stop();
                    try {
                        var data = Response.data;
                        if (data.success) {
                            messageAlert('Microportal creado.', '', 'success');
                            $state.go('microsite-list');
                        }
                    } catch ($e) {
                        swal("Error", "OcurriÃ³ un error en el servidor", "error");
                    }
                },
                OnError: function (Response) {
                    vm.flags.isProccessing = false;
                    bsLoadingOverlayService.stop();
                    try {
                        var data = Response.data;
                        if (Response.status == 422) {
                            var errors = '';
                            angular.forEach(Response.data.error.errors, function (error, key) {
                                errors += '\n- ' + error + '\n';
                            });
                            swal(Response.data.error.user_msg, errors, "error")
                        } else if (Response.status == 403 || Response.status == 401) {
                            swal('Acceso denegado', null, "error")
                        } else {
                            swal("Error", data.error.user_msg, "error")
                        }
                    } catch ($e) {
                        swal("Error", "OcurriÃ³ un error en el servidor", "error");
                    }
                }
            });
        };

        function GetCountries() {
            MicroportalService.GetCountries({
                BeforeSend: function () {

                },
                OnSuccess: function (Response) {
                    vm.countries = Response.data.data;
                },
                OnError: function (Response) {

                }
            });
        }

        function GetCategories() {
            MicroportalService.GetCategories({
                BeforeSend: function () {

                },
                OnSuccess: function (Response) {
                    vm.categories = Response.data.data;
                },
                OnError: function (Response) {
                }
            });
        }

        function GetSubcategories(index) {
            MicroportalService.GetSubcategories(vm.microportal.categories[index].bs_category_id, {
                BeforeSend: function () {

                },
                OnSuccess: function (Response) {
                    vm.subcategories[index] = Response.data.data;
                },
                OnError: function (Response) {

                }
            });
        }

        function GetScores() {
            MicroportalService.GetScores({
                BeforeSend: function () {

                },
                OnSuccess: function (Response) {
                    vm.microportal.scores = Response.data.data;
                },
                OnError: function (Response) {
                }
            });
        }

        function GetLocalServices() {
            MicroportalService.GetLocalServices({
                BeforeSend: function () {

                },
                OnSuccess: function (Response) {
                    vm.microportal.localServices = Response.data.data;
                },
                OnError: function (Response) {
                }
            });
        }

        function GetBsServices() {
            MicroportalService.GetBsServices({
                BeforeSend: function () {

                },
                OnSuccess: function (Response) {
                    vm.microportal.bsServices = Response.data.data;
                },
                OnError: function (Response) {
                }
            });
        }

        function countCategorySelected(id) {
            var count = 0;
            for (var i in vm.microportal.categories) {
                if (vm.microportal.categories[i].bs_category_id == id) {
                    count++;
                }
            }
            return count;
        }

        function init() {
            GetCountries();
            GetCategories();
            GetScores();
            GetLocalServices();
            GetBsServices();
        }

        init();
    })
angular.module('microportal.service', [])
    //--------------------------------------
    // SERVICIO MICROPORTALES
    //--------------------------------------

.factory('MicroportalService', function(Ajax, UrlApiAdmin) {
    var base_url = '/master/ajax';
    var api_admin_url = UrlApiAdmin;
    return {
        GetPage: function($data, $listener) {
            var $url = api_admin_url + '/microportal';
            Ajax.Req('patch', $url, $data, $listener);
        },
        GetCountries: function($listener) {
            Ajax.Req('get', api_admin_url + '/country', null, $listener);
        },
        GetCities: function($country_id, $listener) {
            Ajax.Req('get', api_admin_url + '/country/' + $country_id + '/cities', null, $listener);
        },
        GetScores: function($listener) {
            Ajax.Req('get', api_admin_url + '/scoretype', null, $listener);
        },
        GetLocalServices: function($listener) {
            Ajax.Req('get', api_admin_url + '/local-services', null, $listener);
        },
        GetBsServices: function($listener) {
            Ajax.Req('get', api_admin_url + '/bs-services', null, $listener);
        },
        GetCategories: function($listener) {
            Ajax.Req('get', api_admin_url + '/category', null, $listener);
        },
        GetSubcategories: function($category_id, $listener) {
            Ajax.Req('get', api_admin_url + '/category/' + $category_id + '/subcategories', null, $listener);
        },
        CheckSitename: function($sitename, $listener) {
            var data = {
                sitename: $sitename
            };
            Ajax.Req('post', api_admin_url + '/microportal/sitename', data, $listener);
        },
        SaveMicroportal: function($data, $listener) {
            Ajax.Req('post', base_url + '/microportal', $data, $listener);
        }
    }
});
angular.module('role.app', ['role.controller', 'role.service'])
    .config(function ($stateProvider) {
        $stateProvider
            .state ('roles-list', {
                url: '/roles',
                templateUrl: '/js/app/master/role/view/roles-list.html',
                controller: 'RolesListController',
                controllerAs: 'vm',
                // resolve: {
                //     'acl': function ($q, AclService, AccessService) {
                //         return AccessService.check($q, AclService, 'roles-manage');
                //     }
                // }
            })

            .state ('roles-privileges', {
                url: '/roles/:id/privileges',
                templateUrl: '/js/app/master/role/view/roles-privileges.html',
                controller: 'RolesPrivilegesController',
                controllerAs: 'vm',
                // resolve: {
                //     'acl': function ($q, AclService, AccessService) {
                //         return AccessService.check($q, AclService, 'roles-manage');
                //     }
                // }
            });
    });
angular.module('role.controller', ['bsLoadingOverlay'])
    .controller('RolesListController', ["RoleServiceApiAdmin", "ngTableParams", "bsLoadingOverlayService", "$filter",
         function (RoleService, ngTableParams, bsLoadingOverlayService, $filter) {

        var vm = this;

        vm.can = {
            editRole: true, 
            createRole: true
        };

        vm.flags = {
            isUpdating: false,
            isLoading: false
        };

        vm.rolesList = [];

        vm.role = {
            name: "",
            type_admin_id: null
        };

        vm.listarRoles = function () {
            vm.flags.isLoading = true;
            bsLoadingOverlayService.start();

            RoleService.GetRoles()
                .then(function(response) {
                    vm.rolesList = response.data.data.roles;
                    vm.typesRoleList = response.data.data.types_role;
                    initTableRoles();
                }).finally(function() {
                    if (vm.typesRoleList.length) vm.filterRole(vm.typesRoleList[0].id);
                    bsLoadingOverlayService.stop();
                    vm.flags.isLoading = false;
                });
        };

        vm.registerRole = function () {
            if (vm.role.name.trim() === "" && vm.role.name.length <= 3) {
                vm.role.name = null;
                return message.alert('Ingrese el nombre del rol');
            }

            bsLoadingOverlayService.start();

            RoleService.CreateRole(vm.role)
                .then(function(response) {
                        vm.rolesList.push(response.data.data);
                        vm.role.name = "";
                        message.success(response.data.msg);
                })
                .catch(function(error) {
                    message.apiError(error);
                })
                .finally(function() {
                    refreshTable();
                    bsLoadingOverlayService.stop();
                });
        };

        vm.editRole = function (item) {
            item.$backup = {};
            item.$backup.name = item.name;
            item.$edit = true;
        };

        vm.discardEditRole = function (item) {
            item.$errors = null;
            item.name = item.$backup.name;
            item.$edit = false;
        };

        vm.updateRole = function (item) {
            if (item.name.trim() === "") {
                return message.alert('El nombre de rol no puede quedar vacio.');
            }
            
            item.$changeStatus = false;

            vm.flags.isUpdating = true;
            bsLoadingOverlayService.stop();

            RoleService.UpdateRole(item.id, item)
                .then(function(response) {
                    item.$edit = false;
                    message.success('Rol actualizado');
                })
                .catch(function(error) {
                    message.apiError(error);
                })
                .finally(function() {
                    vm.flags.isUpdating = false;
                    bsLoadingOverlayService.stop();
                });
        };

        vm.changeRoleStatus = function (item) {
            if (vm.flags.isUpdating) {
                return;
            }
            var previousStatus = (item.status == 1 ? 0 : 1);

            vm.flags.isUpdating = true;
            bsLoadingOverlayService.start();

            RoleService.ChangeStatus(item.id, item)
                .catch(function(error) {
                    item.status = previousStatus;
                    message.apiError(error);
                })
                .finally(function() {
                    vm.flags.isUpdating = false;
                    bsLoadingOverlayService.stop();
                });
        };

        function initTableRoles() {
            vm.tableRoles = new ngTableParams({
                page: 1,// show first page
                count: 1000, // count per page
            }, {
                counts: [],
                data: vm.rolesList,
            });
        }

        function refreshTable() {
            vm.tableRoles.reload();
        }

        vm.filterRole = function(id) {
            vm.role.type_admin_id = id;
        };

        /**
         * Init Module
         */
        function init() {
            vm.listarRoles();
        }

        init();

    }])
    //----------------------------------------------
    // PRIVILEGIOS POR ROLES
    //----------------------------------------------
    .controller('RolesPrivilegesController', ["RoleServiceApiAdmin", "bsLoadingOverlayService", "$stateParams",
        function (RoleService, bsLoadingOverlayService, $stateParams) {

        var vm = this;
        vm.role_id = $stateParams.id;
        vm.role = {};

        vm.checkAllPrivilegesChildren = function (item, parent) {
            if (parent !== null) {
                if (parent.checkeable && parent.checked === 0 && item.checked == 1) {
                    parent.checked = 1;
                } else {
                    var count = 0;
                    angular.forEach(parent.children, function (child) {
                        count += child.checked;
                    });

                    if (count === 0) {
                        parent.checked = 0;
                    }
                }
            }
            angular.forEach(item.children, function (child) {
                child.checked = item.checked;
                if (child.children) {
                    angular.forEach(child.children, function (child2) {
                        child2.checked = item.checked;
                    });
                }
            });
        };

        vm.checklPrivilegesParent = function(parent) {
            var c = 0;
            angular.forEach(parent.children, function (child) {
                if (child.checked) {
                    c++;
                }
            });
            parent.checked = Object.keys(parent.children).length == c ? 1 : 0;
        };

        vm.saveChanges = function () {

            bsLoadingOverlayService.start();

            RoleService.SavePrivileges(vm.role_id, vm.privileges)
                .then(function(response) {
                    console.log(response);
                    //AclService.setAbilities(Response.data.data.acl);
                    message.success("Se actualizaron los privilegios.");
                }).catch(function(error) {
                    message.apiError(error);
                }).finally(function() {
                    bsLoadingOverlayService.stop();
                });
        };

        function loadPrivileges() {
            bsLoadingOverlayService.start();

            RoleService.GetPrivileges(vm.role_id)
                .then(function(response) {
                    vm.privileges = response.data.data.privileges;
                    vm.role = response.data.data.role;
                }).catch(function(error) {
                    message.error("Ocurrio un error");
                }).finally(function() {
                    bsLoadingOverlayService.stop();
                });
        }

        /**
         * Init Module
         */
        function init() {
            loadPrivileges();
        }

        init();
    }]);
angular.module("role.app")
    .filter("roleFilter", [function() {
        return function(list, roleID) {
            if (list !== undefined)
            return list.filter(function(item) {
                return item.bs_type_admin_id == roleID;
            });
        };
    }]);
angular.module('role.service', [])
    //--------------------------------------
    // SERVICIO MICROPORTALES
    //--------------------------------------
    .factory('RoleService', function(Ajax, UrlApiAdmin) {
        var base_url = '/master/ajax';
        var api_admin_url = UrlApiAdmin;
        return {
            GetRoles: function($listener) {
                Ajax.Req('get', api_admin_url + '/roles', null, $listener);
            },
            CreateRole: function($data, $listener) {
                Ajax.Req('post', base_url + '/roles', $data, $listener);
            },
            UpdateRole: function($id, $data, $listener) {
                Ajax.Req('put', base_url + '/roles/' + $id, $data, $listener);
            },
            ChangeStatus: function($id, $data, $listener) {
                Ajax.Req('put', base_url + '/roles/' + $id + '?option=status', $data, $listener);
            },
            GetPrivileges: function($id, $listener) {
                Ajax.Req('get', api_admin_url + '/roles/' + $id + '/privileges', null, $listener);
            },
            SavePrivileges: function($id, $data, $listener) {
                Ajax.Req('post', api_admin_url + '/roles/' + $id + '/privileges', $data, $listener);
            },
        };
    });
angular.module('bookersnap', ['bookersnap.directives', 'master.app']);
angular.module("bookersnap.directives", [])
    .constant("loadTime", 5000)
    .directive("loadingBox", ["$interval", "loadTime", function($interval, loadTime) {
        return {
            restrict: 'E',
            scope: {
                waitLoad: "=wait",
                time: "=?",
                bg: "=?",
                pls: "=?"
            },
            template: '<div class="load-parent" ng-show="waitLoad" ng-class="[bg]">\
                              <div class="load-child" ng-class="[with]">\
                                     <div class="preloader" ng-class="[size,pls]">\
                                          <svg class="pl-circular" viewBox="25 25 50 50">\
                                                <circle class="plc-path" cx="50" cy="50" r="20"></circle>\
                                          </svg>\
                                      </div>\
                              </div>\
                        </div>',
            link: function(vm, element, attrs) {
                vm.with = attrs.size || "size-default";
                vm.size = attrs.size ? "pl-" + attrs.size : null;
                vm.bg = attrs.bg ? "bgm-" + attrs.bg : null;
                vm.pls = attrs.pls ? "pls-" + attrs.pls : null;

                var timeoutId;
                vm.time = vm.time || loadTime;

                vm.$watch("waitLoad", function(value) {
                    if (value === true) {
                        destroy();
                        setTime();
                    } else {
                        cancelLoad();
                    }
                });

                function setTime() {
                    timeoutId = $interval(function() {
                        cancelLoad();
                    }, vm.time);
                }

                function cancelLoad() {
                    destroy();
                    vm.waitLoad = false;
                }

                function destroy() {
                    if (timeoutId) {
                        $interval.cancel(timeoutId);
                    }
                }
            }
        };
    }])
    .directive("bsToggleClick", ["$document", function($document) {
        return {
            restrict: 'A',
            scope: {
                bsClose: "&",
                bsOpen: "&"
            },
            link: function(scope, element, attrs) {
                var parent = $(element).closest("[bs-toggle-click]").parent().parent();
                var children = parent.find("[bs-toggle-show]");

                var closeChildren = function(evt) {
                    if ($.contains(parent.get(0), evt.target)) {
                        children.removeClass("ng-hide");
                        $document.bind('click');
                    } else {
                        children.addClass("ng-hide");
                        $document.unbind('click');
                        scope.bsClose();
                        if (!scope.$$phase && !scope.$root.$$phase) {
                            scope.$apply();
                        }
                    }
                };

                element.bind("click", function(evt) {
                    if (children) {
                        children.toggleClass("ng-hide");

                        if (children.hasClass("ng-hide")) {
                            scope.bsClose();
                            $document.unbind('click', closeChildren);
                        } else {
                            scope.bsOpen();
                            $document.bind('click', closeChildren);
                        }
                        if (!scope.$$phase && !scope.$root.$$phase) {
                            scope.$apply();
                        }
                    }
                });

                children.addClass("ng-hide");
            }
        };
    }])
    .directive('onBeforePrint', ['$window', '$rootScope', '$timeout', function onBeforePrint($window, $rootScope, $timeout) {
            var beforePrintDirty = false;
            var listeners = [];

            var beforePrint = function() {
                    if (beforePrintDirty) return;

                    beforePrintDirty = true;				

                    if (listeners) {
                            for (var i = 0, len = listeners.length; i < len; i++) {
                                    listeners[i].triggerHandler('beforePrint');
                            }

                            var scopePhase = $rootScope.$$phase;

                            // This must be synchronious so we call digest here.
                            if (scopePhase != '$apply' && scopePhase != '$digest') {
                                    $rootScope.$digest();
                            }
                    }

                    $timeout(function() {
                            // This is used for Webkit. For some reason this gets called twice there.
                            beforePrintDirty = false;
                    }, 100, false);
            };

            if ($window.matchMedia) {
                    var mediaQueryList = $window.matchMedia('print');
                    mediaQueryList.addListener(function(mql) {
                            if (mql.matches) {
                                    beforePrint();
                            }
                    });
            }

            $window.onbeforeprint = beforePrint;

            return function(scope, iElement, iAttrs) {
                    function onBeforePrint() {
                            scope.$eval(iAttrs.onBeforePrint);
                    }

                    listeners.push(iElement);
                    iElement.on('beforePrint', onBeforePrint);

                    scope.$on('$destroy', function() {
                            iElement.off('beforePrint', onBeforePrint);

                            var pos = -1;

                            for (var i = 0, len = listeners.length; i < len; i++) {
                                    var currentElement = listeners[i];

                                    if (currentElement === iElement) {
                                            pos = i;
                                            break;
                                    }
                            }

                            if (pos >= 0) {
                                    listeners.splice(pos, 1);
                            }
                    });
            };
    }]);
angular.module("api.admin", ["httpApp"])
    .constant("_API_ADMIN_URL", "http://localhost:90");
angular.module("api.admin")
    .factory("RoleServiceApiAdmin", ["http", "_API_ADMIN_URL", function(http, _API_ADMIN_URL) {
        return {
            GetRoles: function() {
                return http.get(_API_ADMIN_URL + '/v1/es/roles', {});
            },
            CreateRole: function(data) {
                return http.post(_API_ADMIN_URL + '/v1/es/roles', data);
            },
            UpdateRole: function(id, data) {
                return http.put(_API_ADMIN_URL + '/v1/es/roles/' + id, data);
            },
            ChangeStatus: function(id, data) {
                return http.put(_API_ADMIN_URL + '/v1/es/roles/' + id + '?option=status', data, {responseType: "text"});
            },
            GetPrivileges: function(id) {
                return http.get(_API_ADMIN_URL + '/v1/es/roles/' + id + '/privileges');
            },
            SavePrivileges: function(id, data) {
                return http.post(_API_ADMIN_URL + '/v1/es/roles/' + id + '/privileges', { privileges: data });
            },
        };
    }]);
angular.module("httpApp", [])
    .factory("http", ["$http", function($http) {
        var service = {
            get: function(url, params) {
                return $http.get(url, {params: params});
            },
            post: function(url, data, config) {
                return $http.post(url, data, config);
            },
            put: function(url, data, config) {
                return $http.put(url, data, config);
            },
            delete: function(url, data, config) {
                return $http.delete(url, data, config);
            }
        };

        return service;
    }]);
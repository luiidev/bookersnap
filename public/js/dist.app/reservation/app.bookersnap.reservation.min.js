var idMicrositio = obtenerIdMicrositio();
angular.module('reservation.app', ['promotion.app', 'flyer.app'])
	.constant("IdMicroSitio", idMicrositio)
	//.constant("ApiUrlReservation", 'http://web.aplication.bookersnap/v1/en/admin/ms/'+idMicrositio+'/mesas');
	.constant("AppBookersnap", "http://web.aplication.bookersnap/v1/en/admin/ms/" + idMicrositio + "/reservation") //url de frontend
	.constant("UrlRepository", "http://web.aplication.bookersnap/files") //cualquier tipo de archivos
	.constant("UrlGeneral", "http://api-promotion.vh/v1/es") //servicios generales para la api
	.constant("ApiUrlMesas", "http://api-mesas.vh/v1/es/microsites/" + idMicrositio) //servicio del api de mesas
	.constant("ApiUrlReservation", "http://api-promotion.vh/v1/es/microsites/" + idMicrositio) //servicios de api reservaciones y promociones
	.config(function($stateProvider, $urlRouterProvider, $httpProvider) {

		$stateProvider
			.state('reservation', {
				url: '/reservation',
				templateUrl: ''
			});

	});
angular.module('flyer.app', ['flyer.controller','flyer.service','flyer.directive'])
.config(function ($stateProvider, $urlRouterProvider, $httpProvider){

    $stateProvider
	.state ('flyer', {
	    url: '/promotion/:id/flyer',
        templateUrl: '/js/app/reservation/flyer/view/flyer.html',
        controller: 'FlyerAddCtrl',
	});

});
angular.module('flyer.controller', ['ngFileUpload','farbtastic','localytics.directives'])
.controller('FlyerAddCtrl', function($scope,$state,$stateParams,Upload,FlyerFactory,ApiUrlReservation, $http, AppBookersnap,UrlGeneral, UrlRepository) {

  $scope.titulo="Dise√±ar Flyer";
  $scope.textFlyer=[];
  $scope.textActive=false;
  $scope.textAplica=false;
  $scope.textIndex=0;
  $scope.existFlyer = false; // Estado que nos dice si existe el flyer en la base de datos
  $scope.flyer_id = "";
  $scope.postFlyer = [];

  var getLabel=function(){
    FlyerFactory.getLabel().success(function(response){
      
      var vTexto = [];
      angular.forEach(response['data']['label'], function(item) {
            vTexto.push(item); 
      });
      
      $scope.flyer.labels = vTexto;
      $scope.flyer.labelSelected=$scope.flyer.labels[0];
      
    });
  }

  var getTypographys=function(){
    FlyerFactory.getTypographys().success(function(data){

      var vTipography = [];
      angular.forEach(data['data']['typographys'], function(tipography) {
            vTipography.push(tipography); 
      });
      $scope.flyer.fonts = vTipography;
      $scope.flyer.fontSelected=$scope.flyer.fonts[0];
      
    });
  }

  var getFlyer=function(){
    var id_flyer = $stateParams.id;
    FlyerFactory.getFlyer(id_flyer).success(function(response){

      /* Estado para identificar cuando se registra o actualiza el flyer 
      *  True = Update
      *  False = Create 
      */
      if(response.success){
        console.dir(response.data.flyerlabel[0]);
        $scope.existFlyer = response.success;
        $scope.existeFlyer=true; // Si la imagen esta cargada es TRUE
        angular.forEach(response.data.flyerlabel, function(data,index){

          var coordenada = data.coodinates.split(",");
          var texto={
          label: {
                  label_id:data.flyer_label_id,
                  name: data.label,
                 },
          typography:{typography_id: data.tipografy},
          font_size: data.font_size + "px",
          color:data.color,
          left: coordenada[0]+"px",
          top:coordenada[1]+"px",
          };

          $scope.textFlyer.push(texto);

        });

         /** CARGA DE IMAGEN A LA VISTA **/
        $scope.coleccion = {
         fileimg: UrlRepository + '/flyer/' + response.data.image,
        }
        

        var handleFileSelect=function(evt) {
               var file=evt.currentTarget.files[0];
               var reader = new FileReader();
               reader.onload = function (evt) {
                 $scope.$apply(function($scope){
                   $scope.coleccion.fileimg=evt.target.result;
                 });
               };
               reader.readAsDataURL(file);
             };
        angular.element(document.querySelector('#fileInput')).on('change',handleFileSelect);
        /** FIN CARGA DE IMAGEN A LA VISTA **/

      }
    });
  }

  $scope.flyer = {
    sizeSelected:{id: 14, valor: '14px'},
    colorSelected:{color: '#03A9F4'},
  }

  getFlyer();
  getLabel();
  getTypographys();
  

  /*Agregar datos a un array textFlyer*/
  $scope.addText=function(){

    if ($scope.flyer.labelSelected) {

        if($scope.textFlyer.length==0){
          crearTexto();
        }else{
          var exists = false;
          angular.forEach($scope.textFlyer, function(objetos) {
            if($scope.flyer.labelSelected.label_id==objetos.label.label_id){
                exists = true;
                messageAlert("Flyer","Texto ya se encuentra ubicado sobre el flyer","warning");
            }          
          });
          if (exists === false) {
            crearTexto();
          }
        }
        
    }else{
      messageAlert("Flyer","Debe seleccionar un texto","warning");
    }

  }

  var crearTexto=function(){

    var texto={
      label:$scope.flyer.labelSelected,
      typography:{typography_id:$scope.flyer.fontSelected.typography_id,name:$scope.flyer.fontSelected.name},
      font_size:$scope.flyer.sizeSelected.id+"px",
      color:$scope.flyer.colorSelected.color
    };
    
    $scope.textFlyer.push(texto);
    cleanText();

  }

  $scope.changeFunction=function(){
    $scope.textActive=false;
  }

  /*Obtener datos de texto seleccionado*/
  $scope.selectedText=function(index){
    $scope.textIndex=index;
    $scope.flyer.labelSelected=$scope.textFlyer[index].label;
    $scope.flyer.fontSelected={typography_id:$scope.textFlyer[index].typography.typography_id,name:$scope.textFlyer[index].typography.name};
    $scope.flyer.sizeSelected.id= $scope.textFlyer[index].font_size.replace("px","");
    $scope.flyer.colorSelected.color=$scope.textFlyer[index].color;
    $scope.textActive=true;
    $scope.textAplica=true;
  }

  $scope.autoPropiedad = function () {
    if($scope.textFlyer.length!=0 && $scope.textAplica==true){
      $scope.textFlyer[$scope.textIndex].font_size=$scope.flyer.sizeSelected.id+"px";
      $scope.textFlyer[$scope.textIndex].color=$scope.flyer.colorSelected.color;
      $scope.textFlyer[$scope.textIndex].typography={typography_id:$scope.flyer.fontSelected.typography_id,name:$scope.flyer.fontSelected.name};

    }
  };
  
  /* Eliminar dato del array textFlyer */
  $scope.deleteText=function() {
    $scope.textFlyer.splice($scope.textIndex,1);
    $scope.textActive=false;
    $scope.textAplica=false;
    cleanText();
  }

  var cleanText=function() {
    $scope.flyer.labelSelected=$scope.flyer.labels[0];
  }

  $scope.noEditar=function() {
    $scope.textActive=false;
    cleanText();
  }

  $scope.existeFlyer=false;
  $scope.uploadImageFlyer = function (file) {
      
    if(file!=null){
        Upload.upload({
          url: AppBookersnap+'/flyer/uploadFile',
            data: {file: file}
          }).then(function (resp) {
            $scope.imagetmp = resp.data;
            $scope.existeFlyer=true;

          },function (resp) {
            $scope.existeFlyer=false;
            console.log('Error status: ' + resp.status);
      });
    }
  };
  
  $scope.clearImageFlyer = function() {
      $scope.existeFlyer=false;
      delete $scope.coleccion.fileimg;
  };


  $scope.saveFlyer=function(){

    /* Se construye el array con la estructura que recibe el API*/
    $scope.label = [];

    if($scope.existeFlyer){ // Para validar si se selecciono una imagen

      if($scope.existFlyer==false){ // Para saber si existe registrado dentro de la Base de datos

        angular.forEach($scope.textFlyer, function(data,index){
        
          var ejeX= angular.element('.text-flyer').eq(index).css("left").replace("px","");
          var ejeY= angular.element('.text-flyer').eq(index).css("top").replace("px","");  

          $scope.label.push({
            label_id : data.label.label_id,
            coodinates: ejeX +","+ejeY,
            font_size: data.font_size,
            tipografy: data.typography.typography_id,
            color: data.color,
          });    

        });

        $scope.postFlyer = {
          "microsite_id": obtenerIdMicrositio(),
          "event_id": $stateParams.id,
          "token": "abc123456",
          "image": (typeof($scope.imagetmp)!="undefined")?$scope.imagetmp.basename:"",
          "image_fullname":(typeof($scope.imagetmp)!="undefined")?$scope.imagetmp.fullname:"",
          "status": 1,  
          "label": $scope.label,
        }  
      
        $http({
            method : "POST",
            data: $scope.postFlyer,
            url : AppBookersnap + '/flyer',
        }).then(function mySucces(response) {
            console.log(response);
            if(response.data.success == true ){
              messageAlert("Success", "Guardado exitoso" , "success", 2000);
              $state.go("reservation.promotion-list");
            }
        }, function myError(response) {
            console.log("Error:",response);
        });   

      }else{

        angular.forEach($scope.textFlyer, function(data,index){
          console.log(data);
          /* Etiquetas superiores */
          var headX = parseInt(angular.element('.text-flyer').eq(index).css("left").replace("px",""));
          var headY =  parseInt(angular.element('.text-flyer').eq(index).css("top").replace("px",""));
          console.clear();
          
          /* Etiquetas internas del texto */
          var etiquetaX= parseInt(angular.element('.etiqueta').eq(index).css("left").replace("px",""));
          var etiquetaY= parseInt(angular.element('.etiqueta').eq(index).css("top").replace("px",""));

          /* Se inserta la coordenada final siempre y cuando se muevan las etiquetas de lo 
          contrario se mantienen las mismas coordenadas tomando como referencia las que estan en las etiquetas 
          interiores */
          var ejeX = (headX==0)?etiquetaX:(etiquetaX + headX);
          var ejeY = (headY==0)?etiquetaY:(etiquetaY + headY);
          
           $scope.label.push({
            label_id : data.label.label_id,
            coodinates: ejeX +","+ejeY,
            font_size: data.font_size,
            tipografy: data.typography.typography_id,
            color: data.color,
          });    
          
        });
        
        $scope.postFlyer = {
          "microsite_id": obtenerIdMicrositio(),
          "event_id": $stateParams.id,
          "token": "abc123456",
          "image": (typeof($scope.imagetmp)!="undefined")?$scope.imagetmp.basename:"",
          "image_fullname":(typeof($scope.imagetmp)!="undefined")?$scope.imagetmp.fullname:"",
          "status": 1,  
          "label": $scope.label,
        } 
        
        $http({
            method : "PUT",
            data: $scope.postFlyer,
            url : AppBookersnap + '/flyer/' + $stateParams.id,
        }).then(function mySucces(response) {
            messageAlert("Success", "Actualizacion exitoso" , "success", 2000);
            $state.go("reservation.promotion-list");
        }, function myError(response) {
            console.log("Error:",response);
        });
        
      } 
        
        
    }else{ 
        messageAlert("Flyer","Debe seleccionar una imagen para el flyer","warning");
    };  
        
  }     

})

angular.module('flyer.directive', [])
.directive('ngDraggable', function($document, $window){
  function makeDraggable(scope, element, attr) {

    
    var startX = 0;
    var startY = 0;

    //var x = 0;
    //var y = 0;
    
    //setTimeout(function(){
      
      var x = element[0].querySelector(".etiqueta").offsetLeft;
      var y = element[0].querySelector(".etiqueta").offsetTop;

      //console.log(x,y);
    //},200);

     element.css({
      position: 'absolute',
      cursor: 'pointer',
      top: y + 'px',
      left: x + 'px'
    });


    element.on('mousedown', function(event) {
      event.preventDefault();
      
      startX = event.pageX - x;
      startY = event.pageY - y;

      $document.on('mousemove', mousemove);
      $document.on('mouseup', mouseup);
    });

    function mousemove(event) {
      y = event.pageY - startY;
      x = event.pageX - startX;

      element.css({
        top: y + 'px',
        left: x + 'px'
      });
    }

    function mouseup() {
      $document.unbind('mousemove', mousemove);
      $document.unbind('mouseup', mouseup);
    }
  }
  return {
    link: makeDraggable
  };
});
angular.module('flyer.service', [])
.factory('FlyerFactory',function($http,ApiUrlReservation,$stateParams, UrlGeneral){

  return {
    getLabel: function(vData){
      return $http.get(UrlGeneral + "/promotions/flyers/labels");
      //return $http.get(ApiUrlGeneral+"/promotions/flyers/labels"); 
    },
    getTypographys: function(vData){
      return $http.get(UrlGeneral + "/promotions/flyers/typographys");
      //return $http.get(ApiUrlGeneral+"/promotions/flyers/typographys"); 
    },
    getFlyer: function(id_flyer){
      return $http.get(ApiUrlReservation + "/promotions/flyers/"+id_flyer);
      //return $http.get(ApiUrlGeneral+"/promotions/flyers/typographys"); 
    },
    saveFlyer: function(vData){
      return $http.get(UrlGeneral + "/promotions/flyers/typographys");
      //return $http.get(ApiUrlGeneral+"/promotions/flyers/typographys"); 
    }
  };

})
angular.module('promotionList.controller', ['ui.sortable', 'sortable'])
    .controller('PromotionListCtrl', function($state,Promotion, $rootScope,$scope, $http, $window, $document, ApiUrlReservation) {

        var sm = this;
        sm.promociones = [];
        $rootScope.flag = false;

        // VARIABLES DE FILTRO
        sm.filtro = {
            fecha_inicio: "",
            fecha_fin: "",
            texto: ""
        };

        sm.reloadRoute = function() {
             $state.go($state.current, {}, {reload: true});
        };

        sm.obtenerFecha = function(fecha) {

            if (fecha == "aN-aN-aN") {
                fecha = "";
            }
            if (fecha !== "") {
                var datefechainicio = new Date(fecha);
                return sm.addZero(datefechainicio.getDate()) + "-" + sm.addZero(datefechainicio.getMonth() + 1) + "-" + datefechainicio.getFullYear();
            } else {
                return "";
            }
        };


        sm.filtrar = function() {

            sm.promociones = [];
            $rootScope.flag = true;


            if (sm.filtro.fecha_inicio === undefined) {
                sm.filtro.fecha_inicio = "";
            }

            if (sm.filtro.fecha_fin === undefined) {
                sm.filtro.fecha_fin = "";
            }

            if(sm.filtro.fecha_fin.length === 0 && sm.filtro.fecha_inicio.length===0 && sm.filtro.texto.length===0){
              $rootScope.flag = false;              
            }
            console.log($rootScope.flag);
            //console.log(sm.filtro.fecha_fin.length + "-" + sm.filtro.fecha_inicio.length + "-" +sm.filtro.texto.length);

            Promotion.filter(sm); // Se actualiza el modelo de promociones 
        };

        // Antepone zeros
        sm.addZero = function(numero) {
            return ("0" + numero).slice(-2);
        };


        /* SE HACE EL LLAMADO DE LAS PROMOCIONES */
        $scope.init = function() {

            sm.promociones = [];
            sm.filtro.texto = "";
            $rootScope.flag = false;
            $http.get(ApiUrlReservation + "/promotions")
                .success(function(response) {
                    sm.promociones = response.data;
                    $scope.items = response.data;
                })
                .error(function() {

                });
            $scope.show = "All";
            $scope.currentShow = 0;
        };

        /* FUNCION PARA ELIMINAR LA PROMOCION */
        sm.deleteTodo = function(item) {

            var r = confirm("¬øDesea eliminar la promoci√≥n?");
            if (r === true) {
                $http({
                        method: 'DELETE',
                        params: {
                            token: "sdsdf5sdf56sd6f5"
                        },
                        url: ApiUrlReservation + '/promotions/' + item.id,
                    })
                    .success(function(response) {

                        if (response.success === true) {

                            var index = sm.promociones.indexOf(item);
                            sm.promociones.splice(index, 1);

                        } else if (response.success === false) {

                            messageAlert("Error", response.msg, "warning");

                        }

                    })
                    .error(function(data) {
                        alert(data.jsonError);
                    });
            }
        };

        $scope.todoSortable = {
            containment: "parent", //Dont let the user drag outside the parent
            cursor: "move", //Change the cursor icon on drag
            tolerance: "pointer" //Read http://api.jqueryui.com/sortable/#option-tolerance
        };
        var items = [];

        /* ORDENADO DE PROMOCIONES MEDIANTE DRAG AND DROP */

        $scope.$watch("sm.promociones", function(newVal, oldVal) {

            if (newVal !== null && newVal.length !== 0 && oldVal.length !== 0) {

                if (newVal != oldVal && oldVal !== null) {

                    /* Estado para poder inhabilitar el ordenamiento mediante drag and drop cuando 
                       se hace una busqueda √≥ filtro */
                    if ($rootScope.flag === false) {
                        /* Se genera la estructura del array a enviar al webservices */
                        var newurl = "";
                        for (i = 0; i < newVal.length; i++) {

                            var myData = new Array("items[" + i + "][promotion_id]=" + newVal[i].id + "", "items[" + i + "][item]=" + newVal[i].item + "");
                            var url = myData.join('&');
                            if (i === 0) {
                                newurl = newurl.concat(url);
                            } else {
                                newurl = newurl.concat("&" + url);
                            }

                        }
                        Promotion.order(sm, newurl); // Se ordenan las promociones

                    }

                }
            }

        }, true);

        /* CAMBIAR ESTADO DE LA PROMOCION*/
        sm.estadoPromocion = function(index) {

            var status = 0;
            var id = sm.promociones[index].id;

            if (sm.promociones[index].status === true) {
                status = 1;
            } else if (sm.promociones[index].status === false) {
                status = 0;
            }

            Promotion.changueState(id,status); // SE cambia de estado

        };

        /* METODOS PARA CAMBIAR LA POSICION DE LA PROMOCION */
        var move = function(origin, destination) {

            var temp = sm.promociones[destination];
            sm.promociones[destination] = sm.promociones[origin];
            sm.promociones[origin] = temp;
        };

        sm.moveUp = function(index) {
            move(index, index - 1);
        };

        sm.moveDown = function(index) {
            move(index, index + 1);
        };

        $scope.init();

    }).controller('GestionarCamposCtrl', function($scope, $uibModal) {

        function modalInstances(animation, size, backdrop, keyboard) {

            var modalInstance = $uibModal.open({
                animation: animation,
                templateUrl: 'myModalContent.html',
                controller: 'GestionCamposReservacionesCtrl',
                size: size,
                resolve: {
                    content: function() {
                        return $scope.modalContent;
                    }
                }
            });

        }

        //Custom Sizes
        $scope.openModal = function(size) {
            modalInstances(true, size, true, true);
        };


    }).controller('GestionCamposReservacionesCtrl', function($scope, $http, $uibModalInstance, ApiUrlReservation) {

        $scope.list = [];
        $scope.array = [];
        $http.get(ApiUrlReservation + "/reservations/forms")
            .success(function(response) {
                if (response.success === true) {

                    $scope.list = response.data.inputs_all;

                    for (var i = 0; i < response["data"]["inputs_form_select"].length; i++) {
                        $scope.array.push(response["data"]["inputs_form_select"][i]["form_id"]);

                    }
                }
            });

        $scope.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };

    }).directive("checkboxGroup", function($http, ApiUrlReservation) {
        return {
            restrict: "A",
            link: function(scope, elem, attrs) {

                // Determine initial checked boxes
                if (scope.array.indexOf(scope.item.form_id) !== -1) {
                    elem[0].checked = true;
                }

                // Update array on click
                elem.bind('click', function() {


                    var form_id = scope.item.form_id;

                    // Checked 
                    if (elem[0].checked) {

                        /* Se envian los estados y cambios */
                        $http({
                                method: 'POST',
                                data: {
                                    form_id: form_id
                                },
                                url: ApiUrlReservation + '/reservations/forms',
                            })
                            .then(function successCallback(response) {
                                // console.log(response);  
                            });

                    }
                    // unchecked
                    else {

                        $http({
                                method: 'DELETE',
                                url: ApiUrlReservation + '/reservations/forms/' + form_id,
                            })
                            .then(function successCallback(response) {

                            });

                    }

                });
            }
        };
    });

angular.module('promotion.app', ['promotion.controller', 'promotionList.controller', 'promotion.service', 'promotion.directive', 'promotion.filter'])
    .config(function($stateProvider, $urlRouterProvider, $httpProvider) {

        $stateProvider
            .state('reservation.promotion', {
                url: '/promotion',
                templateUrl: '/js/app/reservation/promotion/view/index.html',
                controller: 'PromotionCtrl',
            })
            //CONFIG de listar promociones
            .state('reservation.promotion-list', {
                url: '/promotion/list',
                templateUrl: '/js/app/reservation/list-promo/view/promotion-list.html',
                controller: 'PromotionListCtrl',
                controllerAs: 'sm'
            })
            .state('reservation.add', {
                url: '/promotion/add',
                templateUrl: '/js/app/reservation/promotion/view/promotion-add.html',
                controller: 'PromotionAddCtrl',
                /*views: {
			'': { templateUrl: '/js/app/reservation/promotion/view/add.html' },
    		'promotion@add': {
        		templateUrl: '/js/app/reservation/promotion/view/promotion-add.html',
                controller: 'PromotionAddCtrl',
      		},
      		'flyer@add': {
        		templateUrl: '/js/app/reservation/promotion/view/flyer-add.html',
                controller: 'FlyerAddCtrl',
            }
        }*/
            })
            .state('reservation.edit', {
                url: '/promotion/:id/edit',
                templateUrl: '/js/app/reservation/promotion/view/promotion-edit.html',
                controller: 'PromotionAddCtrl',
            });



    });
angular.module('promotion.controller', ['ngFileUpload', 'ngImgCrop', 'textAngular', 'ngEmoticons'])
    .controller('PromotionCtrl', function($scope) {
        $scope.titulo = "Promociones";
    })

.controller('PromotionAddCtrl', function($scope, $rootScope, $state, $stateParams, Upload, $timeout, $uibModal, PromotionFactory, PromotionDataFactory, TurnosPromotionDataFactory, TableFactory, ZonesActiveFactory, AppBookersnap, UrlRepository) {

    var promotionId = $stateParams.id;
    $scope.promotion = {};

    var getTypes = function() {
        PromotionFactory.listTypes().then(function success(data) {
            $scope.promotion.tipos = data;
            if (!promotionId) {
                $scope.promotion.tipoSelected = $scope.promotion.tipos[0];
            }
        }, function error(data) {
            messageErrorApi(data, "Error", "warning");
        });
    };

    var getZones = function() {
        PromotionFactory.listZones().then(function success(data) {
            $scope.promotion.zonas = data;
        }, function error(data) {
            messageErrorApi(data, "Error", "warning");
        });
    };

    var listTablesPayment = function() {
        PromotionFactory.listTablesPayment(promotionId).then(function success(data) {
            $scope.promotion.zonas = data;
        }, function error(data) {
            messageErrorApi(data, "Error", "warning");
        });
    };

    /*Parametros iniciales para recorte de imagen*/
    $scope.croppedDataUrl = '';
    $scope.imageCropStep = 1;
    $scope.cropped = {
        cropWidth: 100,
        cropHeight: 100,
        cropTop: 0,
        cropLeft: 10
    };

    if (promotionId) {
        $scope.titulo = "Actualizar promoci√≥n";
        PromotionFactory.onlyPromotion(promotionId).then(function success(data) {
            $scope.promotion = data;
            getTypes();
            $scope.promotion.zonas = PromotionFactory.listZonesEdit(promotionId);
            /*Preguntar si existe imagen*/
            if (data.imagenOriginal) {
                $scope.promotion.myImage = data.myImage;
                $scope.croppedDataUrl = '';

                var handleFileSelect = function(evt) {
                    var file = evt.currentTarget.files[0];
                    var reader = new FileReader();
                    reader.onload = function(evt) {
                        $scope.$apply(function($scope) {
                            $scope.promotion.myImage = evt.target.result;
                        });
                    };
                    reader.readAsDataURL(file);
                };
                angular.element(document.querySelector('#fileInput')).on('change', handleFileSelect);
            } else {
                $scope.promotion.myImage = "";
            }


        }, function error(data) {
            messageErrorApi(data, "Error", "warning");
        });

    } else {
        $scope.titulo = "Nueva promoci√≥n";
        $scope.promotion = {
            title: "",
            description: "",
            status_expire: false,
            date_expire: "",
            publication: false,
            status: [{
                name: 'Vigente',
                value: 1
            }, {
                name: 'Deshabilitado',
                value: 2
            }],
            statusSelected: {
                value: 1
            },
            myImage: ""
                //myImage:'notifications.png'
        };
        getTypes();
        getZones();

    }

    /*Accion de boton Seleccionar imagen y subida a carpeta temporal*/
    $scope.validarImg = function(file) {
        if (file === null) {
            messageAlert("Flyer", "Seleccione imagen mayor a 300px x 300px", "warning");
            delete $scope.promotion.myImage;
            return;
        }
        Upload.upload({
            url: AppBookersnap + '/promotion/uploadFile',
            data: {
                file: file
            }
        }).then(function(resp) {
            $scope.imagetmp = resp.data;
        }, function(resp) {
            messageAlert("Imagen", "Se ha producido error interno al subir imagen", "warning");
            console.log('Error status: ' + resp.status);
        });
    };

    /*Funcion para agrupar table en zones*/
    var existsZone = function(zones, idZone) {
        var index = null;
        angular.forEach(zones, function(zone, key) {
            if (zone.zone_id == idZone) {
                index = key;
            }
        });
        return index;
    };
    //console.log('Fecha '+$scope.promotion.date_expire);
    /*Accion de boton Guardar promocion*/
    $scope.savePromotion = function(option) {

        //uploadImage($scope.promotion.myImage);
        //uploadImage64($scope.croppedDataUrl);

        $scope.lstTurn = TurnosPromotionDataFactory.getTurnosItems();
        $scope.lstZone = ZonesActiveFactory.getZonesItems();

        /*Validaciones y formatos de campos*/
        var date_expire = '';
        if ($scope.promotion.status_expire === true) {
            date_expire = convertFechaYYMMDD($scope.promotion.date_expire, "es-ES", {});
        } else {
            date_expire = '';
        }

        var zones;
        var vZones = [];
        var condi_zone = $scope.promotion.tipoSelected.type_event_id;
        if (condi_zone == 3) {
            zones = [];
        } else {
            zones = $scope.lstZone;
            angular.forEach(zones, function(zone) {
                var indexZone = existsZone(vZones, zone.zone_id);
                if (indexZone === null) {
                    var dataTable = {
                        zone_id: zone.zone_id,
                        name: zone.name,
                        table: [{
                            table_id: zone.table_id,
                            price: zone.price
                        }]
                    };
                    vZones.push(dataTable);
                } else {
                    vZones[indexZone].table.push({
                        table_id: zone.table_id,
                        price: zone.price
                    });
                }

            });
        }

        var imagen = '';
        if ($scope.promotion.myImage) {
            if ($scope.imagetmp) {
                basename = $scope.imagetmp.basename;
                fullname = $scope.imagetmp.fullname;
                cropper = $scope.cropper;
                //cropped=$scope.cropped;
            } else {
                basename = $scope.promotion.imagenOriginal;
                fullname = '';
                cropper = $scope.cropper;
            }

        } else {
            basename = '';
            fullname = '';
            cropper = '';
            //cropped='';
        }

        /*Formatear objetos a enviar al guardar y/o actualizar*/
        var datosPromotion = {
            //"microsite_id":1,
            "title": $scope.promotion.title,
            "description": $scope.promotion.description,
            "image": basename,
            "type_event": $scope.promotion.tipoSelected.type_event_id,
            "status": $scope.promotion.statusSelected.value,
            "status_expire": TableFactory.getEvaluaInverse($scope.promotion.status_expire),
            "date_expire": date_expire,
            //"publication":$scope.promotion.publication,   
            "image_fullname": fullname,
            "cropper": cropper,
            //"cropped":cropped,
            "turn": $scope.lstTurn,
            "zone": vZones
        };

        var datosPromotionEditar = {
            "title": $scope.promotion.title,
            "description": $scope.promotion.description,
            "image": basename,
            "type_event": $scope.promotion.tipoSelected.type_event_id,
            "status": $scope.promotion.statusSelected.value,
            "status_expire": TableFactory.getEvaluaInverse($scope.promotion.status_expire),
            "date_expire": date_expire,
            //"publication":$scope.promotion.publication,   
            "image_fullname": fullname,
            "cropper": cropper,
        };

        if ($scope.promotion.description !== '') {

            if (option == "create") {

                PromotionDataFactory.createPromotion(datosPromotion).success(function(response) {
                    if (response.success) {
                        messageAlert("Success", "Se ha creado la promoci√≥n con √©xito", "success");
                        var redireccionar = function() {
                            $state.go('promotion-list');
                        };
                        $timeout(redireccionar, 2000);
                    } else {
                        messageErrorApi(response.msg, "Corregir turnos", "error");
                    }
                    //console.log('Guardando'+angular.toJson(datosPromotion,true));
                }).error(function(data, status, headers) {
                    messageErrorApi(status, "Error", "warning");
                });
                //console.log('Guardando '+angular.toJson(datosPromotion,true));

            } else {
                datosPromotionEditar.event_id = parseInt($stateParams.id);

                PromotionDataFactory.updatePromotion(datosPromotionEditar).success(function(response) {
                    //console.log(angular.toJson(response,true));
                    messageAlert("Success", "Se actualizado la promoci√≥n con √©xito", "success");
                    var redireccionar = function() {
                        $state.go('promotion-list');
                    };
                    $timeout(redireccionar, 2000);
                }).error(function(data, status, headers) {
                    messageErrorApi(status, "Error", "warning");
                });
                //console.log('Actualizando '+angular.toJson(datosPromotion,true));
            }

        } else {
            messageAlert("Promoci√≥n", "Debe ingresar descripcion de la promoci√≥n", "warning");
        }

    };

    /*Accion Cancelar imagen cargada*/
    $scope.clearImagePromotion = function() {
        delete $scope.promotion.myImage;
        delete $scope.croppedDataUrl;
    };


    /*Apertura modal Turno*/
    $scope.modalContent = TurnosPromotionDataFactory.getTurnosItems();

    function modalInstances(animation, size, backdrop, keyboard) {
        var modalInstance = $uibModal.open({
            animation: animation,
            templateUrl: 'myModalContent.html',
            controller: 'TurnoInstanceCtrl',
            size: size,
            resolve: {
                content: function() {
                    return $scope.modalContent;
                }
            }
        });
    }
    $scope.openModal = function(size) {
        modalInstances(true, size, true, true);
    };

    /*Apertura modal Fecha de caducidad*/
    $scope.open = function($event, opened) {
        $event.preventDefault();
        $event.stopPropagation();
        $scope[opened] = true;
    };
    //$scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
    //$scope.format = $scope.formats[0];


    /*Apertura modal Configurar zonas de paga*/
    $scope.invocarZonas = function(item) {
        openModalZones(item);
    };
    var openModalZones = function(item) {
        modalInstancesZones(item);
    };

    function modalInstancesZones(item) {
        var modalInstance = $uibModal.open({
            templateUrl: 'myModalContentZone.html',
            controller: 'ZoneInstanceCtrl',
            size: 'lg',
            resolve: {
                content: function() {
                    return $scope.promotion.zonas;
                },
                type_event: function() {
                    return item;
                }
            }
        });
    }

})

.controller('TurnoInstanceCtrl', function($scope, $stateParams, $modalInstance, $filter, TurnosPromotionDataFactory, content, PromotionFactory) {

    $scope.listTurnos = content;

    /*Funcion que guarda dias seleccionados*/
    var getDaysSelected = function(days) {
        var daysData = [];
        angular.forEach(days, function(data, key) {
            if (data) {
                daysData.push({
                    day: key
                });
                //daysData.push(key);
            }
        });
        return daysData;
    };

    /*
    //Usados para habilitar/deshabilitar checkbox//
    var disabledDaysSelected = function(days){
        angular.forEach(days, function(data,key){
          if(data){
            var id=data.day;
            $scope.turnos.semana[id].disabled=true;
          }
        });
    };

    var enabledDaysSelected = function(days){
        angular.forEach(days, function(data,key){
          if(data){
            var id=data.day;
            $scope.turnos.semana[id].disabled=false;
          }
        });
    };
    */

    $scope.turnoIndex = 0;

    /*Manejar la visualizacion de listado de turnos creados*/
    var cantidad = $scope.listTurnos.length;
    if (cantidad > 0) {
        $scope.existeTurno = true;
    } else {
        $scope.existeTurno = false;
    }

    $scope.turnos = {
        semana: [{
            id: 0,
            label: 'Domingo',
            disabled: false,
            checked: false
        }, {
            id: 1,
            label: 'Lunes',
            disabled: false,
            checked: false
        }, {
            id: 2,
            label: 'Martes',
            disabled: false,
            checked: false
        }, {
            id: 3,
            label: 'Miercoles',
            disabled: false,
            checked: false
        }, {
            id: 4,
            label: 'Jueves',
            disabled: false,
            checked: false
        }, {
            id: 5,
            label: 'Viernes',
            disabled: false,
            checked: false
        }, {
            id: 6,
            label: 'Sabado',
            disabled: false,
            checked: false
        }, ],
        turnoSelected: [],
        hours_ini: '',
        hours_end: '',
        disposiciones: [{
            id: 1,
            name: 'Aplicar siempre'
        }, {
            id: 2,
            name: 'A√±adir turno a la promocion'
        }],
    };

    /*Manejar la visualizacion opciones de Turno*/
    if ($scope.listTurnos !== '') {
        $scope.turnos.disposicionSelected = {
            id: 2,
            name: 'A√±adir turno a la promocion'
        };
    } else {
        $scope.turnos.disposicionSelected = {
            id: 1,
            name: 'Aplicar siempre'
        };
    }

    /*Funcion para obtener los horarios de un micrositio*/
    var getHorarios = function() {
        PromotionFactory.listSchedules().then(function success(data) {
            $scope.turnos.hours_ini = data;
            $scope.turnos.hours_end = data;
        }, function error(data) {
            messageErrorApi(data, "Error", "warning");
        });
    };
    getHorarios();


    var promotionId = $stateParams.id;
    if (promotionId) {
        angular.forEach($scope.listTurnos, function(turn) {
            if (turn) {
                var days = turn.days;
            }
        });
    }

    /*Accion de boton A√±adir*/
    $scope.addTurno = function() {

        var cantidadSel = $scope.turnos.turnoSelected.length;
        if (cantidadSel > 0) {
            if ($scope.turnos.hour_ini && $scope.turnos.hour_end) {
                if ($scope.turnos.hour_ini.time != $scope.turnos.hour_end.time) {
                    var days = getDaysSelected($scope.turnos.turnoSelected);
                    $scope.turnoSelected = days;

                    $scope.turnos.hours_ini = $scope.turnos.hour_ini.time_ori;
                    $scope.turnos.hours_end = $scope.turnos.hour_end.time_ori;

                    var opciones = {
                        days: $scope.turnoSelected,
                        hours_ini: $scope.turnos.hours_ini,
                        hours_end: $scope.turnos.hours_end,
                    };

                    var promotionId = $stateParams.id;
                    if (promotionId) {
                        //var turnOpciones=[];
                        //turnOpciones.push(opciones);
                        var newopciones = {
                            shift_promotion: opciones
                        };
                        TurnosPromotionDataFactory.createTurnPromotion(promotionId, newopciones).success(function(response) {
                            if (response.success) {
                                opciones.turn_id = response.data;
                                //console.log('Enviando'+angular.toJson(opciones,true));
                                TurnosPromotionDataFactory.setTurnosItems(opciones);
                                cleanTurno();
                            } else {
                                cleanTurno();
                                messageAlert("Corregir turnos", response.msg, "error");
                            }
                        });

                    } else {
                        TurnosPromotionDataFactory.setTurnosItems(opciones);
                        cleanTurno();
                    }

                    $scope.existeTurno = true;

                } else {
                    messageAlert("Corregir horas", "Hora de inicio coincide con Hora final", "error");
                }
            } else {
                messageAlert("Turnos", "Debe seleccionar campos de hora", "warning");
            }
        } else {
            messageAlert("Turnos", "Debe seleccionar al menos un dia de la semana", "warning");
        }

    };

    /*Accion de boton Eliminar turno*/
    $scope.deleteTurno = function(item, turn) {
        var promotionId = $stateParams.id;
        $scope.turnoIndex = item;
        if (promotionId) {
            TurnosPromotionDataFactory.deleteTurnPromotion(promotionId, turn.turn_id);
            //console.log(angular.toJson('Pasar promocion '+promotionId+' y turno ha eliminar '+turn.turn_id,true));
        }

        //$scope.listTurnos.splice($scope.turnoIndex,1);
        TurnosPromotionDataFactory.delTurnosItem($scope.turnoIndex);
        cleanTurno();
    };

    /*Funcion para limpiar input de entrada*/
    var cleanTurno = function() {
        getHorarios();
        $scope.turnos.hour_ini = '';
        $scope.turnos.hour_end = '';
        $scope.turnos.turnoSelected = [];
    };

    /*Accion de boton Cerrar modal*/
    $scope.cancel = function() {
        $modalInstance.dismiss('cancel');
    };

})

.controller('ZoneInstanceCtrl', function($rootScope, $scope, $uibModal, $modalInstance, $filter, content, type_event) {

    $scope.listZones = content; //Todas las zonas en blanco
    $rootScope.itemTables = []; //Array para cuadros moraditos 
    $scope.type_event = type_event;
    //console.log($scope.type_event);


    /***************Funcion ejecutada por directiva****************/

    $scope.activarTableOptions = function(index, data) {

        var numero = $rootScope.itemTables.length;

        if (numero > 0) {
            var index = $rootScope.itemTables.indexOf(data);
            if (index > -1) {
                $rootScope.itemTables.splice(index, 1);
            } else {
                $rootScope.itemTables.push(data);
            }
        } else {
            $rootScope.itemTables.push(data);
        }
        //console.log('Seleccionados: '+angular.toJson($scope.itemTables, true));

    };


    $scope.addPrecio = function() {
        if ($rootScope.itemTables.length > 0) {
            modalInstancesPrices($scope.type_event);
        } else {
            messageAlert("A√±adir precio", "Debe seleccionar al menos una mesa", "warning");
        }
    };

    function modalInstancesPrices(type_event) {
        var modalInstance = $uibModal.open({
            templateUrl: 'myModalContentPrice.html',
            controller: 'PriceInstanceCtrl',
            size: 'sm',
            resolve: {
                content: function() {
                    return $rootScope.itemTables;
                },
                type_event: function() {
                    return type_event;
                },
            }
        });
    }
    $scope.cancel = function() {
        $modalInstance.dismiss('cancel');
    };


    $scope.desactivarTable = function(index, data) {
        modalInstancesdesactivaPrices(index, data);
    };

    function modalInstancesdesactivaPrices(index, data) {
        var modalInstance = $uibModal.open({
            templateUrl: 'myModalContentdesactivaPrice.html',
            controller: 'DesactivaPriceInstanceCtrl',
            size: 'sm',
            resolve: {
                content: function() {
                    return data;
                }
            }
        });
    }

})

.controller('PriceInstanceCtrl', function($rootScope, $stateParams, $scope, $modalInstance, $filter, content, type_event, ZonesActiveFactory, PromotionDataFactory) {

    $scope.itemTables = content;
    $scope.precioDefault = "";
    var promotionId = $stateParams.id;

    $scope.cancel = function() {
        $modalInstance.dismiss('cancel');
    };
    $scope.savePrecio = function() {
        if ($scope.precioDefault === "") {
            messageAlert("A√±adir precio", "Debe ingresar precio para mesas selecionadas", "warning");
        } else {

            var vTable = {
                event_id: parseInt(promotionId),
                type_event: parseInt(type_event),
                tables_pay: []
            };

            angular.forEach($scope.itemTables, function(table) {
                vTable.tables_pay.push({
                    table_id: table.table_id,
                    price: $scope.precioDefault,
                    zone_id: table.zone_id
                });
            });


            if (promotionId) {
                PromotionDataFactory.createTablesPayment(vTable).success(function(data) {
                    //console.log(data);
                }, function error(data) {
                    messageErrorApi(data, "Error", "warning");
                });
                //console.log('Guardar: '+angular.toJson(vTable,true));
            }

            angular.forEach($scope.itemTables, function(objeto) {
                objeto.price = $scope.precioDefault;
                ZonesActiveFactory.setZonesItems(objeto);
            });
            $rootScope.itemTables = [];
            $modalInstance.close();
        }
    };
    $scope.deleteTable = function(item, index) {
        var idelemento = '#el' + $scope.itemTables[index].table_id;
        angular.element(idelemento).removeClass('selected-table');
        $scope.itemTables.splice(index, 1);
    };

})

.controller('DesactivaPriceInstanceCtrl', function($rootScope, $scope, $stateParams, $modalInstance, $filter, content, ZonesActiveFactory, PromotionDataFactory) {

    var promotionId = $stateParams.id;
    $scope.itemPrices = content;
    $scope.cancel = function() {
        $modalInstance.dismiss('cancel');
    };
    $scope.cleanPrecio = function() {
        var indexforma = $scope.itemPrices.price = "";
        if (promotionId) {
            PromotionDataFactory.deleteTablesPayment(promotionId, $scope.itemPrices.table_id);
        }
        ZonesActiveFactory.delZonesItem($scope.itemPrices);
        $modalInstance.close();
        $scope.itemPrices = [];
    };

});
angular.module('promotion.directive', [])
.directive('ngSelectTable', function(){

  function makeSelectTable(scope, element, attr) {
    
    var left = attr.x;
    var top = attr.y;

    element.css({
      position: 'absolute',
      cursor: 'pointer',
      top: top + 'px',
      left: left + 'px',
    });


    element.on('click',function(event){

      event.preventDefault();
      //console.log("Test");
      if(this.classList.contains('definite-table')== true){
        //console.log('Desea eliminar precio precio de mesa');
        this.classList.remove('selected-table');
        scope.onDeselectFn();
      }else{
        
        if (this.classList.contains('selected-table')) {

          this.classList.remove('selected-table');
        } else {
          this.classList.add('selected-table');
        }
        scope.onSelectedFn();
      }
    });
  }

  return {
    link: makeSelectTable,
    scope: {
      onSelectedFn : '&',
      onDeselectFn : '&'
    }
  };

})
angular.module('promotion.filter', [])
  .filter("maxLength", function() {
    return function(text, max) {
      if (text != null) {
        if (text.length > max) {
          return "Texto a mostrar en el portal: <span class='text-red'>" + text.substring(3, max) + "</span>";
        }
      }
    };
  })
  .filter("toUpper", function() {
    return function(text) {
      if (text != null) {
        return text.toUpperCase();
      }
    };
  })
  .filter("toMidnight", function() {
    return function(text) {
      if (text == '0:00 AM') {
        return '12:00 AM';
      } else {
        return text;
      }
    };
  })

.filter("toMeridiano", function($filter) {
  return function(hour) {
    if (hour != null) {
      var pos = hour.indexOf(":");
      //var min = hour.substr(hourIndex);
      var hourIndex = hour.substr(0, pos);

      var d = new Date(0, 0, 0, hourIndex, 0, 0);
      var formato = moment(d).valueOf();
      var hora = $filter('date')(formato, 'h:mm a');
      return hora;
    }
  };
})

.filter("diaSemana", function() {
  return function(num) {
    if (num != null) {
      var day = "";
      switch (num) {
        case 0:
          day = "Domingo";
          break;
        case 1:
          day = "Lunes";
          break;
        case 2:
          day = "Martes";
          break;
        case 3:
          day = "Miercoles";
          break;
        case 4:
          day = "Jueves";
          break;
        case 5:
          day = "Viernes";
          break;
        case 6:
          day = "Sabado";
          break;
      }
      return day;
    }
  };
});
angular.module('promotion.service', [])
    .factory('PromotionDataFactory', function($http, AppBookersnap, ApiUrlReservation) {
        return {
            createPromotion: function(pData) {
                return $http.post(AppBookersnap + '/promotion', pData);
            },
            getPromotion: function(pId) {
                return $http.get(AppBookersnap + "/promotion/" + pId);
            },
            getHorario: function() {
                return $http.get(ApiUrlReservation + "/shifts");
            },
            updatePromotion: function(pData) {
                return $http.put(AppBookersnap + '/promotion/' + pData.event_id, pData);
            },
            uploadtmpPromotion: function(file) {},
            getTablesPayment: function(pId) {
                return $http.get(ApiUrlReservation + "/promotions/" + pId + "/table/payments");
            },
            deleteTablesPayment: function(pId, tpId) {
                return $http.delete(ApiUrlReservation + "/promotions/" + pId + "/table/payments/" + tpId);
            },
            createTablesPayment: function(pData) {
                return $http.post(ApiUrlReservation + "/promotions/" + pData.event_id + "/table/payments", pData);
            }
        };
    })
    .factory('ZonasDataFactory', function($http, ApiUrlMesas) {
        return {
            getZones: function() {
                return $http.get(ApiUrlMesas + "/zones");
            }
        }
    })
    .factory('TiposDataFactory', function($http, UrlGeneral) {
        return {
            getTypes: function() {
                return $http.get(UrlGeneral + "/promotions/types");
            }
        }
    })
    .factory('Promotion', function($http, ApiUrlReservation) {
        return {
            filter: function(sm) {
                var url = ApiUrlReservation + '/promotions?filter[fecha_inicial]=' + sm.obtenerFecha(sm.filtro.fecha_inicio) + '&filter[fecha_final]=' + sm.obtenerFecha(sm.filtro.fecha_fin) + '&filter[name]=' + sm.filtro.texto;
                $http.get(url)
                    .then(function(items) {
                        for (var i = 0; i < items.data.data.length; i++) {
                            sm.promociones.push(items.data.data[i]);
                        }
                    });

            },
            order: function(sm, newurl) {

                $http({
                        method: 'PATCH',
                        url: ApiUrlReservation + '/promotions/order?' + newurl,
                    })
                    .then(function successCallback(response) {
                        if (response["success"] === false) {
                            messageAlert("Error", response["msg"], "warning");
                        }
                    }, function errorCallback(response) {
                        console.log(response.statusText);
                    });

            },
            changueState: function(id, status) {

                $http({
                        method: 'PATCH',
                        url: ApiUrlReservation + ' /promotions/' + id + '?status=' + status,
                    })
                    .then(function successCallback(response) {

                    }, function errorCallback(response) {

                    });

            }
        }
    })

.factory('PromotionFactory', function(ZonasDataFactory, TiposDataFactory, TableFactory, PromotionDataFactory, $q, TurnosPromotionDataFactory, ZonesActiveFactory, UrlRepository, $filter) {
    return {
        listZones: function() {
            var defered = $q.defer();
            ZonasDataFactory.getZones().success(function(data) {
                var vZones = [];
                angular.forEach(data.data, function(zones) {
                    var tables = zones.tables;
                    var vTables = [];
                    angular.forEach(tables, function(table) {
                        var position = table.config_position.split(",");
                        var dataTable = {
                            zone_id: zones.id,
                            name_zona: zones.name,
                            table_id: table.id,
                            name: table.name,
                            minCover: table.min_cover,
                            maxCover: table.max_cover,
                            left: position[0],
                            top: position[1],
                            shape: TableFactory.getLabelShape(table.config_forme),
                            size: TableFactory.getLabelSize(table.config_size),
                            rotate: table.config_rotation,
                            price: table.price,
                        }
                        vTables.push(dataTable);
                    });
                    var dataZone = {
                        zone_id: zones.zone_id,
                        name: zones.name,
                        table: vTables,
                    }
                    vZones.push(dataZone);
                });

                defered.resolve(vZones);
            }).error(function(data, status, headers) {
                defered.reject(data);
            });
            return defered.promise;
        },
        listTypes: function() {
            var defered = $q.defer();
            TiposDataFactory.getTypes().success(function(data) {
                var vTypes = [];
                angular.forEach(data.data, function(types) {
                    vTypes.push(types);
                });
                defered.resolve(vTypes);
            }).error(function(data, status, headers) {
                defered.reject(data);
            });
            return defered.promise;
        },
        listSchedules: function() {
            var defered = $q.defer();
            PromotionDataFactory.getHorario().success(function(data) {
                var schedules = data.data;
                var vSchedules = TurnosPromotionDataFactory.generatedTimeTable(schedules);
                defered.resolve(vSchedules);
            }).error(function(data, status, headers) {
                defered.reject(data);
            });
            return defered.promise;
        },
        /*Formatear datos de promocion a editar*/
        onlyPromotion: function(pId) {
            var defered = $q.defer();
            PromotionDataFactory.getPromotion(pId).success(function(data) {
                var promotion = data.data;
                var vPromotion = [];
                var dataPromotion = {
                    title: promotion.title,
                    description: promotion.description,
                    status_expire: TableFactory.getEvalua(promotion.status_expire),
                    date_expire: TableFactory.getFormatofecha(promotion.date_expire),
                    publication: TableFactory.getEvalua(promotion.publication),
                    tipoSelected: {
                        type_event_id: promotion.type_event
                    },
                    status: [{
                        name: 'Vigente',
                        value: 1
                    }, {
                        name: 'Deshabilitado',
                        value: 2
                    }],
                    statusSelected: {
                        value: promotion.status
                    },
                    myImage: UrlRepository + '/promotions/' + promotion.image,
                    imagenOriginal: promotion.image,
                    turn: promotion.turn,
                    //zonas: promotion.zone
                }
                vPromotion.push(dataPromotion);

                var turnos = promotion.turn

                angular.forEach(turnos, function(turn) {
                    TurnosPromotionDataFactory.setTurnosItems(turn);
                });

                defered.resolve(vPromotion[0]);
            }).error(function(data, status, headers) {
                defered.reject(data);
            });
            return defered.promise;
        },
        listTablesPayment: function(pId) {
            var defered = $q.defer();
            PromotionDataFactory.getTablesPayment(pId).success(function(data) {
                defered.resolve(data.data);
            }).error(function(data, status, headers) {
                defered.reject(data.data);
            });
            return defered.promise;
        },
        /*Formatear zonas y zonas pagadas*/
        listZonesEdit: function(pId) {
            var me = this;
            var defered = $q.defer();
            me.listZones().then(
                function success(data) {
                    return data;
                },
                function error(data) {
                    return data;
                }

            ).then(function(zones) {
                me.listTablesPayment(pId).then(
                    function success(tables) {
                        var vTables = [];
                        angular.forEach(tables, function(tableData) {
                            angular.forEach(tableData, function(table) {
                                vTables.push(table);
                            });
                        });
                        return vTables;
                    },
                    function error(response) {
                        return response;
                    }
                ).then(
                    function success(tablesPay) {
                        var vZonas = [];

                        angular.forEach(zones, function(zone) {
                            var vTable = {
                                zone_id: zone.zone_id,
                                name: zone.name,
                                table: []
                            }
                            angular.forEach(zone.table, function(table) {

                                if (tablesPay) {
                                    angular.forEach(tablesPay, function(tableData) {
                                        if (tableData.table_id == table.table_id && tableData.price != '') {
                                            ZonesActiveFactory.setZonesItems(table);
                                            table.price = tableData.price;
                                        }
                                    });
                                }

                                vTable.table.push(table);
                            });
                            vZonas.push(vTable);
                        });

                        defered.resolve(vZonas);
                    },
                    function error(response) {
                        defered.reject(response);
                    }
                );

            });

            return defered.promise;
        }
    }
})

.factory('TurnosPromotionDataFactory', function($http, TableFactory, $filter, ApiUrlReservation) {
        var turnoColection = [];
        var interfazTurnos = {
            nombre: "turnos",
            getTurnosItems: function() {
                return turnoColection;
            },
            setTurnosItems: function(turnoItem) {
                turnoColection.push(turnoItem);
            },
            delTurnosItem: function(turnoItem) {
                turnoColection.splice(turnoItem, 1);
            },
            cleanTurnosItems: function() {
                turnoColection = [];
            },
            createTurnPromotion: function(pId, tData) {
                return $http.post(ApiUrlReservation + '/promotions/' + pId + '/shifts', tData);
            },
            deleteTurnPromotion: function(pId, tId) {
                return $http.delete(ApiUrlReservation + "/promotions/" + pId + "/shifts/" + tId);
            },
            generatedTimeTable: function(turnData) {
                var times = TableFactory.rangeDateAvailable(60, turnData);
                var timesFinal = [];

                angular.forEach(times, function(value, key) {

                    var hourIndex = value.indexOf(":");
                    var min = value.substr(hourIndex);

                    hourIndex = value.substr(0, hourIndex);


                    //min = min.replace(":","");
                    //min = min.replace("AM","");
                    //min = min.replace("PM","");

                    var index = hourIndex * 4;

                    if (min == 15) {
                        index += 1;
                    } else if (min == 30) {
                        index += 2;
                    } else if (min == 45) {
                        index += 3;
                    }

                    var d = new Date(0, 0, 0, hourIndex, 0, 0);
                    var formato = moment(d).valueOf();
                    //123546465
                    var hora = $filter('date')(formato, 'h:mm a');

                    timesFinal.push({
                        time: hora,
                        time_ori: value,
                        index: index
                    });

                });
                return timesFinal;
            },

        };
        return interfazTurnos;

    })
    /*Ir guardando zonas con precio asignado*/
    .factory('ZonesActiveFactory', function() {
        var zoneColection = [];
        var interfazZones = {
            getZonesItems: function() {
                return zoneColection;
            },
            setZonesItems: function(zoneItem) {
                zoneColection.push(zoneItem);
            },
            delZonesItem: function(zoneItem) {
                angular.forEach(zoneColection, function(value, key) {
                    if (value.table_id == zoneItem.table_id) {
                        zoneColection.splice(key, 1);
                    }
                });
            },
            cleanZonesItems: function() {
                zoneColection = [];
            },
        }
        return interfazZones;

    })
    .factory('TableFactory', function($filter) {
        return {
            getLabelShape: function(id) {
                var label = "";
                switch (id) {
                    case 1:
                        label = "round";
                        break;
                    case 2:
                        label = "square";
                        break;
                    case 3:
                        label = "recta";
                        break;
                }
                return label;
            },
            getLabelSize: function(id) {
                var label = "";
                switch (id) {
                    case 1:
                        label = "small";
                        break;
                    case 2:
                        label = "medium";
                        break;
                    case 3:
                        label = "large";
                        break;
                }
                return label;
            },
            getEvalua: function(valor) {
                var evalua = "";
                switch (valor) {
                    case 1:
                        evalua = true;
                        break;
                    case 0:
                        evalua = false;
                        break;
                }
                return evalua;
            },
            getEvaluaInverse: function(valor) {
                var evalua = "";
                switch (valor) {
                    case true:
                        evalua = 1;
                        break;
                    case false:
                        evalua = 0;
                        break;
                }
                return evalua;
            },
            getFormatofecha: function(valor) {
                if (valor == "0000-00-00") {
                    return "";
                } else {
                    return valor;
                }

            },
            rangeDateAvailable: function(minSteep, turn) {

                var iniHour = turn.hours_ini_min.substr(0, 2);
                var iniMin = turn.hours_ini_min.substr(3, 2);

                var endHour = parseInt(turn.hours_end_max.substr(0, 2));
                var endMin = parseInt(turn.hours_end_max.substr(3, 2));

                var hour = parseInt(iniHour);
                var min = parseInt(iniMin);

                var time = [];

                if (hour <= endHour) {
                    while (hour <= endHour) {

                        //var sHorario = (hour <=11) ? "AM":"PM";
                        //var hora = hour +":"+ ((min == 0) ? "00" : min) + " " + sHorario
                        var hora = hour + ":" + ((min == 0) ? "00" : min) + ":00";
                        time.push(hora);

                        if (min == (60 - minSteep)) {
                            hour += 1;
                            min = 0;
                        } else {
                            if (hour == endHour && min == endMin) {
                                hour = 45;
                            }
                            min += minSteep;
                        }

                    }
                } else if (endHour < hour) {

                    if (hour <= 11) {
                        var num01 = 24 - hour;
                        for (a = 0; a < num01; a++) {

                            var hora = hour + ":" + ((min == 0) ? "00" : min);
                            time.push(hora);

                            if (min == (60 - minSteep)) {
                                hour += 1;
                                min = 0;
                            }
                        }

                    } else {
                        var num01 = 24 - hour;
                        for (i = 0; i < num01; i++) {
                            var hora = hour + ":" + ((min == 0) ? "00" : min);
                            time.push(hora);

                            if (min == (60 - minSteep)) {
                                hour += 1;
                                min = 0;
                            }
                        }
                    }

                    if (endHour > 11) {
                        //var num02=24-endHour;
                    } else {
                        var num02 = endHour - 0;
                        for (h = 0; h <= num02; h++) {

                            var hora = h + ":" + ((min == 0) ? "00" : min);
                            time.push(hora);

                            if (min == (60 - minSteep)) {
                                endHour += 1;
                                min = 0;
                            }
                        }
                    }

                }
                return time;
            },
        }
    });
/************
Inyectamos nuestra aplicacion
example.app = nombre de la aplicacion

************/
angular.module('bookersnap', [
    //'bookersnap.directives',
    //'bookersnap.services',
    //'auth.app',
    'reservation.app',
]);
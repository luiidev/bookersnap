angular.module("App", ["ngLocale", "ui.bootstrap"])
    .run(["$location" , function($location) {
        var color = $location.search().color;
        if (color) {
            var style = angular.element("<style type=\"text/css\">.bs-color { color: #"+ color +" !important; } .bs-bgm { background: #"+ color +" !important;color: #fff; } </style>");
            document.querySelector("head").appendChild(style[0]);
        }
    }])
    .run(["$templateCache", function($templateCache) {
      $templateCache.put("template/datepicker/day.html",
        "<table role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
        "  <thead>\n" +
        "    <tr class=\"nav\">\n" +
        "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
        "      <th colspan=\"{{::5 + showWeeks}}\"><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm date-label\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\" style=\"width:100%;\"><strong>{{title}}</strong></button></th>\n" +
        "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
        "    </tr>\n" +
        "    <tr class=\"days\">\n" +
        "      <th ng-if=\"showWeeks\" class=\"text-center\"></th>\n" +
        "      <th ng-repeat=\"label in ::labels track by $index\" class=\"text-center\"><small aria-label=\"{{::label.full}}\">{{::label.abbr}}</small></th>\n" +
        "    </tr>\n" +
        "  </thead>\n" +
        "  <tbody>\n" +
        "    <tr ng-repeat=\"row in rows track by $index\">\n" +
        "      <td ng-if=\"showWeeks\" class=\"text-center h6\"><em>{{ weekNumbers[$index] }}</em></td>\n" +
        "      <td ng-repeat=\"dt in row track by dt.date\" class=\"text-center cell-btn\" role=\"gridcell\" id=\"{{::dt.uid}}\" ng-class=\"::dt.customClass\">\n" +
        "        <button type=\"button\" style=\"min-width:100%;\" class=\"btn btn-default btn-sm\" ng-class=\"{'btn-info': dt.selected, 'active bs-bgm': isActive(dt)}\" ng-click=\"select(dt.date)\" ng-disabled=\"dt.disabled\" tabindex=\"-1\" ng-if=\"!dt.secondary\"><span ng-class=\"::{'text-muted': dt.secondary, 'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
        "      </td>\n" +
        "    </tr>\n" +
        "  </tbody>\n" +
        "</table>\n" +
        "");
    }])
    .config(["$provide", function($provide) {
        $provide.decorator('uibDatepickerDirective', ['$delegate',function($delegate) {
            var directive = $delegate[0];

            var link = directive.link;

            directive.$$isolateBindings.monthChanged = {
                attrName: "monthChanged",
                mode: "&",
                optional: true
            };

            directive.compile = function() {
                return function(scope, element, attrs, ctrls) {
                    link.apply(this, arguments);

                    scope.$watch(function() {
                       return ctrls[0].activeDate;
                    }, function(newVal, oldVal) {
                        if (scope.datepickerMode == 'day') {
                            if (oldVal.getMonth() !== newVal.getMonth() || oldVal.getYear() !== newVal.getYear()) {
                                var mDate = moment(newVal);
                                var date = mDate.format("YYYY-MM-DD");
                                var month = mDate.format("MM");
                                var year = mDate.format("YYYY");
                                if (typeof scope.monthChanged == "function") {
                                    scope.monthChanged({"$date": date, "$month": month, "$year": year, "$instance": scope.datepicker, "$select": scope.select});
                                }
                            }
                        }
                    }, true);
                    
                };
            };
            return $delegate;
        }]);
    }]);

angular.module("App")
    .controller("availabilityCtrl", ["$scope", "$q", "availabilityService", "utiles", "$window", "base_url",
        function(vm, $q, availabilityService, utiles, $window, base_url) {

        vm.form = {};
        vm.result = [];
        vm.availability = {};
        vm.loadingInfo = false;
        vm.message = "";

        vm.selectedPeople = {};
        vm.selectedZone = {};
        vm.selectedHour = {};
        vm.selectedEvent= {};

        vm.promotion = {};

        vm.minDate = new Date();
        vm.date = new Date();

        /**
         * Variables de apollo
         */
         var zoneColapse = true;
         vm.case = 0;

        /**
         *  HTTP 
         */
         vm.searchAvailability = function() {
            var deferred = $q.defer();

            vm.loadingInfo = true;
            // vm.result.length = 0;
            availabilityService.getAvailability(vm.availability)
                .then(function(response) {
                    vm.result = resultFormat(response.data.data);
                    showResult();
                    deferred.resolve(vm.result);
                }).catch(function(error) {
                    deferred.reject("Error en la busqueda de disponibilidad");
                    console.log("Error en la busqueda de disponibilidad", error);
                }).finally(function() {
                    vm.loadingInfo = false;
                    vm.infoAvailability = 'Reservaciones disponibles al ' + vm.infoDate + ' a las ' + vm.availability.hour.option_user + ' para ' + vm.availability.num_guests + ' personas.';
                });

             return deferred.promise;
         };

         vm.saveTemporalReserve = function(item) {
             vm.loadingInfo = true;

             availabilityService.saveTemporalReserve(item.form)
                 .then(function(response) {
                     var temp_token  = response.data.data.token;
                     redirect(temp_token);
                 }).catch(function(error) {
                     alert("Ocurrio un problema al tratar de reservar, intentelo de nuevo.");
                     console.log("Error en la reserva temporal", error);
                 }).finally(function() {
                     vm.loadingInfo = false;
                 });
         };
        /**
         * end HTTP
         */
        
        var redirect = function(key) {
            $window.location.href = base_url.get("/reserve?key=" + key);
        };

        var showResult = function() {
            $("#first").fadeOut(100, function() {
                $("#two").fadeIn(100);
            });
            vm.case = 2;
        };
        
        vm.returnSearch = function() {
            $("#two").fadeOut(100, function() {
                $("#first").fadeIn(100);
            });
            vm.case = 1;
        };

       /**
        * Date picker filter
        */
        vm.disabled = function(date, mode){
            if(! vm.daysDisabled ) return;
            var isHoliday = false;
            for(var i = 0; i < vm.daysDisabled.length ; i++) {
              if(areDatesEqual(toDate(vm.daysDisabled[i]), date)){
                isHoliday = true;
              }
            }

            return ( mode === 'day' && isHoliday );
        };

        function areDatesEqual(date1, date2) {
          return date1.setHours(0,0,0,0) === date2.setHours(0,0,0,0);
        }

        function toDate(date) {
              return new Date(date.split("-"));
        }
        /**
         * END Date picker filter
         */

        /**
         * Selects
         */
        
        vm.zoneColapse = function(event) {
            if (!zoneColapse) {
                event.stopPropagation();
            }
        };

        vm.selectPeople = function(guest) {
            vm.availability.num_guests = guest.value;
            vm.selectedPeople = guest;
        };

        vm.selectZone  = function(zone) {
            vm.availability.zone_id = zone.id;
            vm.selectedZone = zone; 
        };

        vm.selectHour = function(hour, event) {
            if (hour === null || hour === undefined) {
                vm.availability.hour = null;
                vm.selectedHour = {}; 
                vm.selectedEvent = {};
            } else {
                vm.availability.hour = hour.option;
                vm.selectedHour = hour; 

                if (event === null || event === undefined) {
                    if (hour.events) {
                        if (hour.events.length) {
                            vm.selectedEvent = hour.events[0];
                            vm.availability.event_id = hour.events[0].id;
                        } else {
                            vm.selectedEvent = {};
                        }
                    } else {
                        vm.selectedEvent = {};
                    }
                } else {
                    vm.selectedEvent = event;
                    vm.availability.event_id = event.id;
                }
            }
        };
        /**
         * END Selects
         */


        /**
         * Format data
         */
         var resultFormat = function(items) {
             angular.forEach(items, function(item) {
                 if (item.hour !== null) {
                     item.hour_format = moment(item.hour, "HH:mm:ss").format("h:mm A");
                 } else {
                     item.hour_format = "No disponible";
                 }
             });

             return items;
         };

         var findObject = function(array, func) {
            var object = null;
            for (var i = 0; i <= array.length -1; i++) {
                var result = func(array[i]);
                if (result === true) {
                    return array[i];
                }
            }

            return object;
         };

         var defaultData = function(date) {
            zoneColapse = true;

            // Default Date
             vm.availability.date = date;

             // Default num guests
             var find_people = findObject(vm.form.people, function(item) {
                return item.value == vm.selectedPeople.value;
             });

             if (find_people !== null) {
                vm.selectPeople(find_people);
             } else {
                if (vm.form.people.length) {
                    if (vm.form.people[1]) {
                        vm.selectPeople(vm.form.people[1]);
                    } else {
                        vm.selectPeople(vm.form.people[0]);
                    }
                }
             }

             // Default zone
             if (vm.form.zones.length === 1) {
                vm.selectZone(vm.form.zones[0]);
                zoneColapse = false;
             } else {
                var find_zone = findObject(vm.form.zones, function(item) {
                   return item.id == vm.selectedZone.id;
                });

                if (find_zone !== null) {
                   vm.selectZone(find_zone);
                } else {
                   if (vm.form.zones.length) {
                       vm.selectZone(vm.form.zones[0]);
                   }
                }
             }

            // Default hour
            vm.selectHour(utiles.filterHour(vm.form.hours, vm.availability.hour));

            // Date detail
             vm.infoDate = moment(date).format("dddd, D [de] MMMM");

             // vm.searchAvailability();
         };
         /**
          * END Format data
          */

        var InitModule = function(date) {
            vm.case = 1;
            vm.loadingInfo = true;
            vm.loadingData = true;
            vm.message = "Cargando ...";

            availabilityService.getFormatAvailability(date)
                .then(function(response) {
                    vm.form = response.data.data;
                    vm.daysDisabled = vm.form.daysDisabled;
                    vm.date = new Date(vm.form.date.split("-"));
                    defaultData(vm.form.date);

                    vm.loadingData = false;
                }).catch(function() {
                    vm.result.length = 0;
                    vm.message = "Elija otra opcion de busqueda";
                }).finally(function() {
                    vm.loadingInfo = false;
                });
        };

        vm.$watch("date", function(newValue, oldValue) {
            if (! moment(newValue).isSame(oldValue) && ! moment(vm.form.date).isSame(newValue)) {
                var date = moment(vm.date).utc().format("YYYY-MM-DD");
                InitModule(date);
            }
        });

        var searchTemporalReserve = function() {
            var deferred = $q.defer();

            if (base_url.has("edit") ) {
                deferred.reject();
                return deferred.promise;
            }

            availabilityService.searchTemporalReserve()
                .then(function(response) {
                    vm.prevReserve = response.data.data;
                    if (vm.prevReserve !== null) {
                        vm.showPrev = true;
                        vm.prevResToken = vm.prevReserve.reservation.token;
                        deferred.resolve();
                    } else {
                        deferred.reject();
                    }
                }).catch(function(error) {
                    deferred.reject();
                });

            return deferred.promise;
        };

        var cancelTemporalReservation = function() {
            availabilityService.cancelTemporalReservation();
        };

        vm.closePrev = function() {
            InitModule();
            vm.showPrev = false;
            cancelTemporalReservation();
        };

        vm.openPrev = function() {
            redirect(vm.prevResToken);
        };

        vm.promotionDisplay = function(item, evt) {
            vm.promotion.imageUrl = item.image ? "url(" + item.image + ")" : null; 
            vm.promotion.description = item.description || null;
            vm.promotion.display = true;
            angular.element(document.querySelector("#event")).css({top: evt.pageY - (vm.promotion.imageUrl ? 190 : 120) });
        };

        vm.promotionHide = function() {
            vm.promotion.display = false;
        };

        vm.changeMonth = function(date_ini, month, year, instance, select) {
            date_fin = moment(date_ini).endOf('months').format("YYYY-MM-DD");

            var search = {
                date_ini: date_ini,
                date_fin: date_fin
            };

            availabilityService.getDaysDisabled(search)
                .then(function(response) {
                    vm.daysDisabled = response.data.data;
                }).finally(function(){
                    instance.refreshView();
                    if ( moment(date_ini).month() == moment(vm.date).month() ) {
                        select(moment(vm.date).toDate());
                    }
                });
        };

        (function Init() {
            searchTemporalReserve()
                .catch(function() {
                    InitModule();
                });
        })();

    }]);
angular.module("App")
    .controller("confirmedCtrl", ["$scope", "$window", "$location", "availabilityService", "base_url", function(vm, $window, $location, availabilityService, base_url) {
 
        vm.cancel = function() {
            availabilityService.cancelReservation(token)
                .then(function() {
                    redirect();
                }).catch(function() {
                    alert("Ocurrio un problema al intentar cancelar la reservacion, intentelo de nuevo por favor.");
                });
        };

        var redirect = function() {
            $window.location.href = base_url.get("");
        };
    }]);
angular.module("App")
    .controller("errorCtrl", ["$scope", "$timeout", "$window", "$location", "base_url", function(vm, $timeout, $window, $location, base_url) {
        $timeout(function() {
            $window.location.href = base_url.get("");
        }, 3000);
    }]);
angular.module("App")
    .controller("reservationCtrl", ["$scope", "$window", "$location", "availabilityService", "utiles", "base_url", function(vm, $window, $location, service, utiles, base_url) {

        vm.reservation= {};
        vm.reservation.token = token;
        vm.reservation.guest= {};
        vm.reservation.guest_list = [];
        vm.newGuest = "";

        vm.years = [];
        vm.months = [];
        vm.days = [];

        vm.errors = {};

        vm.loading = false;

        vm.addGuest =function(event) {
            if (event.keyCode == 13 || event.keyCode == 32) {
                if (vm.newGuest .trim().length > 2) {
                    vm.reservation.guest_list.push(vm.newGuest .trim());
                    vm.newGuest = "";
                }
            }
        };

        vm.removeGuest = function(i) {
            vm.reservation.guest_list.splice(i, 1);
        };

        vm.clearErrors = function(key) {
            if (Object.prototype.toString.call(vm.errors[key]) == "[object Array]") {
                vm.errors[key].length = 0;
            }
        };

        var redirect = function(key) {
            $window.location.href = base_url.get("/confirmed?key=" + key);
        };

        vm.redirectBase = function() {
            alert("El tiempo para completar la reservacion a terminado.");
            $window.location.href = base_url.url();
        };

        vm.redirectBaseEdit = function() {
            $window.location.href = base_url.getWithParam({edit: 1});
        };

        vm.save = function() {
            vm.loading = true;
            vm.errors = {};
            service.saveReservation(vm.reservation)
                .then(function(response) {
                    redirect(response.data.data);
                }).catch(function(error) {
                    console.log(error);
                    if (error.data === null || error.status == 500) {
                        vm.loading = false;
                        return alert("Ocurrio un problema vuelva a intentarlo.");
                    }
                    vm.errors = error.data.data;
                    vm.loading = false;
                });
        };

        var runYear = function() {
            y = 2000;
            while (y-- > 1940) {
                vm.years.push(y);
            }
        };

        var runMonth = function() {
            vm.months = [
                { id: "01", label: "Enero" },
                { id: "02", label: "Febrero" },
                { id: "03", label: "Marzo" },
                { id: "04", label: "Abril" },
                { id: "05", label: "Mayo" },
                { id: "06", label: "Junio" },
                { id: "07", label: "Julio" },
                { id: "08", label: "Agosto" },
                { id: "09", label: "Septiembre" },
                { id: "10", label: "Octubre" },
                { id: "11", label: "Noviembre" },
                { id: "12", label: "Diciembre" }
            ];
        };

        vm.changeMonth = function(mes) {
            vm.days.length = 0;

            var j = 0;

            if (mes === ""){
                k = 0;
            } else if (mes == 2){
                k = 28;
            } else if (mes == 4 || mes== 6 || mes == 9 || mes == 11) {
                k = 30;
            } else {
                k = 31;
            }

            while (j++ < k) {
                if (j.toString().length === 1) {
                    vm.days.push("0" + j.toString());
                } else {
                    vm.days.push(j.toString());
                }
            }

            if (vm.days.indexOf(vm.day) === -1) {
                vm.day = undefined;
            }

            validDate();
        };

        vm.changeDay = function(mes) {
            validDate();
        };

        vm.changeYear = function(mes) {
            validDate();
        };

        var validDate = function () {
            if (vm.year ===undefined || vm.month ===undefined || vm.day === undefined) {
                vm.reservation.guest.birthdate = null;
            } else {
                var date = new Date(vm.year + "/" + vm.month + "/" + vm.day);

                if ( isNaN(date.getTime()) ) {
                    vm.reservation.guest.birthdate = null;
                } else {
                    vm.reservation.guest.birthdate = moment(date).format("YYYY-MM-DD");
                }
            }
        };

        (function Init() {
            runYear();
            runMonth();
        })();

    }]);
angular.module("App")
    .directive("timeDown", ["$timeout", "$window", "$location", function($timeout, $window, $location) {
        return {
            restrict: 'E',
            scope: {
                expire: "=?",
                finally: "&onFinish"
            },
            template: '<span>{{  time }}</span>',
            link: function(vm, element, attrs) {
                var time, expire;

                vm.$watch("expire", function() {
                    if (vm.expire !== undefined) {
                        expire = ~~Number(vm.expire);
                        time = moment.utc(expire);

                        if (expire <= 0 ) {
                            close();
                        } else {
                            watch();
                        }
                    }
                });

                function watch() {
                   vm.time = time.subtract(1, "seconds").format("mm:ss");
                   if (time.minute() === 0 && time.second() === 0) close(true);
                   $timeout(watch, 1000);
                }

                function close(exeEvent) {
                    if (exeEvent) vm.finally();
                }
            }
        };
    }]);
angular.module("App")
    .filter("dateBS", function() {
        return function(date) {
            return moment(date).format("dddd, D [de] MMMM");
        };
    })
    .filter("timeBS", function() {
        return function(hour) {
            return moment(hour, "HH:mm:ss").format("h:mm A");
        };
    })
    .filter("fullDateBS", function() {
        return function(date_time) {
            return moment(date_time).format("dddd, D [de] MMM YYYY [a las] h:mm A");
        };
    })
    .filter('HtmlToText', function() {
      return function(text) {
        return  text ? String(text).replace(/<[^>]+>/gm, '') : '';
      };
    });
angular.module("App")
    .factory("availabilityService", ["$http", "base_url",function($http, base_url) {     
        return {
            getFormatAvailability: function(date) {
                return $http.get(base_url.url( "/api/availability/formatAvailability"), { params: {date: date}});
            },
            getAvailability: function(data) {
                return $http.get(base_url.url() + "/api/availability/basic", {
                    params: {
                        date: data.date,
                        hour: data.hour,
                        num_guests: data.num_guests,
                        zone_id: data.zone_id,
                        event_id: data.event_id
                    }
                });
            },
            saveTemporalReserve: function(data) {
                return $http.post(base_url.url("/api/reservationtemporal"), data);
            },
            saveReservation: function(data) {
                return $http.post(base_url.url("/api/table/reservation/w"), data);
            },
            cancelReservation: function(reserveToken) {
                return $http.post(base_url.url("/api/table/reservation/cancel/" + reserveToken));
            },
            cancelTemporalReservation: function() {
                return $http.delete(base_url.url("/api/reservationtemporal"));
            },
            searchTemporalReserve: function() {
                return $http.get(base_url.url("/api/reservationtemporal"));
            },
            getDaysDisabled: function(data) {
                return $http.get(base_url.url("/api/availability/daysdisabled"), { params: data});
            },
        };
    }])
    .factory("utiles", [function() {
        return {
            filterHour: function(hours, defaultItem) {
                var timeDefault;

                var now = moment().add((15 - (parseInt(moment().format("mm")) % 15)), "minutes").second(0).millisecond(0);
                var timeDefaultIsEstablished = false;

                var defaultHour = defaultItem ? moment(defaultItem.option, "HH:mm:ss") : null;

                angular.forEach(hours, function(hour) {
                    if (!timeDefaultIsEstablished || defaultHour) {
                        var hourTime = moment(hour.option, "HH:mm:ss");
                        if (hourTime.isSameOrAfter(now) && !timeDefaultIsEstablished) {
                            timeDefault = hour;
                            timeDefaultIsEstablished = true;
                        }
                        if (hourTime.isSame(defaultHour)) {
                            timeDefault = hour;
                        }
                    }
                });

                if (!timeDefault) {
                    if (hours.length > 0) {
                        timeDefault = hours[hours.length - 1];
                    }
                }

                return timeDefault;
            }
        };
    }])
    .factory("base_url", ["$location", function($location) {
        var _base_url = $location.protocol() + "://" + $location.host() + "/w/" + microsite;

        var params = "";
        var c = 0;
        angular.forEach($location.search(), function(value, i) {
            if (i !== "edit") {
                params += (c === 0 ? "" : "&") + i + "=" + value;
                c++;
            }
        });

        params = params === "" ? "" : "#/?" + params;

        return {
            url: function(path) {
                return _base_url + (path ? path : "");
            },
            get: function(path) {
                return _base_url + path + params;
            },
            getWithParam: function(obj_params) {
                var other_params = "";
                angular.forEach(obj_params, function(value, i) {
                    other_params += "&" + i + "=" + value;
                });

                return _base_url + (params === "" ?  "#/?" + other_params : params + other_params);
            },
            has: function(search) {
                return $location.search()[search] !== undefined;
            }
        };
    }]);
$(document).ready(function() {
    $(".header:not(.search)").on("click", function() {

        var body = $(this).parent().find(".body");

        var active = $($.grep($(".row .body"), function(element) {
          return $(element).hasClass("active");
        }));

        if ( !body.is(active) ) {
                body.addClass("active", 200);
                active.removeClass("active", 200);
        }
    });
});

var obtenerIdMicrositio = function() {
    var url = location.href;
    var pos = url.indexOf("/w/");
    var id = url.substr(pos + 3);
    var last_pos = id.indexOf("/");
    id = id.substr(0, last_pos);
    return id;
};
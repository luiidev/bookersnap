<<<<<<< HEAD
angular.module("App", ["ngLocale", "ui.bootstrap"])
    .run(["$location" , function($location) {
        var color = $location.search().color;
        if (color) {
            var style = angular.element("<style type=\"text/css\">.bs-color { color: #"+ color +" !important; } .bs-bgm { background: #"+ color +" !important;color: #fff; } </style>");
            document.querySelector("head").appendChild(style[0]);
        }
    }])
    .run(["$templateCache", function($templateCache) {
      $templateCache.put("template/datepicker/day.html",
        "<table role=\"grid\" aria-labelledby=\"{{::uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
        "  <thead>\n" +
        "    <tr class=\"nav\">\n" +
        "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
        "      <th colspan=\"{{::5 + showWeeks}}\"><button id=\"{{::uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm date-label\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\" style=\"width:100%;\"><strong>{{title}}</strong></button></th>\n" +
        "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
        "    </tr>\n" +
        "    <tr class=\"days\">\n" +
        "      <th ng-if=\"showWeeks\" class=\"text-center\"></th>\n" +
        "      <th ng-repeat=\"label in ::labels track by $index\" class=\"text-center\"><small aria-label=\"{{::label.full}}\">{{::label.abbr}}</small></th>\n" +
        "    </tr>\n" +
        "  </thead>\n" +
        "  <tbody>\n" +
        "    <tr ng-repeat=\"row in rows track by $index\">\n" +
        "      <td ng-if=\"showWeeks\" class=\"text-center h6\"><em>{{ weekNumbers[$index] }}</em></td>\n" +
        "      <td ng-repeat=\"dt in row track by dt.date\" class=\"text-center cell-btn\" role=\"gridcell\" id=\"{{::dt.uid}}\" ng-class=\"::dt.customClass\">\n" +
        "        <button type=\"button\" style=\"min-width:100%;\" class=\"btn btn-default btn-sm\" ng-class=\"{'btn-info': dt.selected, 'active bs-bgm': isActive(dt)}\" ng-click=\"select(dt.date)\" ng-disabled=\"dt.disabled\" tabindex=\"-1\" ng-if=\"!dt.secondary\"><span ng-class=\"::{'text-muted': dt.secondary, 'text-info': dt.current}\">{{::dt.label}}</span></button>\n" +
        "      </td>\n" +
        "    </tr>\n" +
        "  </tbody>\n" +
        "</table>\n" +
        "");
    }])
    .config(["$provide", function($provide) {
        $provide.decorator('uibDatepickerDirective', ['$delegate',function($delegate) {
            var directive = $delegate[0];

            var link = directive.link;

            directive.$$isolateBindings.monthChanged = {
                attrName: "monthChanged",
                mode: "&",
                optional: true
            };

            directive.compile = function() {
                return function(scope, element, attrs, ctrls) {
                    link.apply(this, arguments);

                    scope.$watch(function() {
                       return ctrls[0].activeDate;
                    }, function(newVal, oldVal) {
                        if (scope.datepickerMode == 'day') {
                            if (oldVal.getMonth() !== newVal.getMonth() || oldVal.getYear() !== newVal.getYear()) {
                                var mDate = moment(newVal);
                                var date = mDate.format("YYYY-MM-DD");
                                var month = mDate.format("MM");
                                var year = mDate.format("YYYY");
                                if (typeof scope.monthChanged == "function") {
                                    scope.monthChanged({"$date": date, "$month": month, "$year": year, "$instance": scope.datepicker, "$select": scope.select});
                                }
                            }
                        }
                    }, true);
                    
                };
            };
            return $delegate;
        }]);
    }]);

angular.module("App")
    .controller("availabilityCtrl", ["$scope", "$q", "availabilityService", "utiles", "$window", "base_url",
        function(vm, $q, availabilityService, utiles, $window, base_url) {

        vm.form = {};
        vm.result = [];
        vm.availability = {};
        vm.loadingInfo = false;
        vm.message = "";

        vm.selectedPeople = {};
        vm.selectedZone = {};
        vm.selectedHour = {};
        vm.selectedEvent= {};

        vm.promotion = {};

        vm.minDate = new Date();
        vm.date = new Date();

        /**
         * Variables de apollo
         */
         var zoneColapse = true;
         vm.case = 0;

        /**
         *  HTTP 
         */
         vm.searchAvailability = function() {
            var deferred = $q.defer();

            vm.loadingInfo = true;
            // vm.result.length = 0;
            availabilityService.getAvailability(vm.availability)
                .then(function(response) {
                    vm.result = resultFormat(response.data.data);
                    showResult();
                    deferred.resolve(vm.result);
                }).catch(function(error) {
                    deferred.reject("Error en la busqueda de disponibilidad");
                    console.log("Error en la busqueda de disponibilidad", error);
                }).finally(function() {
                    vm.loadingInfo = false;
                    vm.infoAvailability = 'Reservaciones disponibles al ' + vm.infoDate + ' a las ' + vm.availability.hour.option_user + ' para ' + vm.availability.num_guests + ' personas.';
                });

             return deferred.promise;
         };

         vm.saveTemporalReserve = function(item) {
             vm.loadingInfo = true;

             availabilityService.saveTemporalReserve(item.form)
                 .then(function(response) {
                     var temp_token  = response.data.data.token;
                     redirect(temp_token);
                 }).catch(function(error) {
                     alert("Ocurrio un problema al tratar de reservar, intentelo de nuevo.");
                     console.log("Error en la reserva temporal", error);
                 }).finally(function() {
                     vm.loadingInfo = false;
                 });
         };
        /**
         * end HTTP
         */
        
        var redirect = function(key) {
            $window.location.href = base_url.get("/reserve?key=" + key);
        };

        var showResult = function() {
            $("#first").fadeOut(100, function() {
                $("#two").fadeIn(100);
            });
            vm.case = 2;
        };
        
        vm.returnSearch = function() {
            $("#two").fadeOut(100, function() {
                $("#first").fadeIn(100);
            });
            vm.case = 1;
        };

       /**
        * Date picker filter
        */
        vm.disabled = function(date, mode){
            if(! vm.daysDisabled ) return;
            var isHoliday = false;
            for(var i = 0; i < vm.daysDisabled.length ; i++) {
              if(areDatesEqual(toDate(vm.daysDisabled[i]), date)){
                isHoliday = true;
              }
            }

            return ( mode === 'day' && isHoliday );
        };

        function areDatesEqual(date1, date2) {
          return date1.setHours(0,0,0,0) === date2.setHours(0,0,0,0);
        }

        function toDate(date) {
              return new Date(date.split("-"));
        }
        /**
         * END Date picker filter
         */

        /**
         * Selects
         */
        
        vm.zoneColapse = function(event) {
            if (!zoneColapse) {
                event.stopPropagation();
            }
        };

        vm.selectPeople = function(guest) {
            vm.availability.num_guests = guest.value;
            vm.selectedPeople = guest;
        };

        vm.selectZone  = function(zone) {
            vm.availability.zone_id = zone.id;
            vm.selectedZone = zone; 
        };

        vm.selectHour = function(hour, event) {
            if (hour === null || hour === undefined) {
                vm.availability.hour = null;
                vm.selectedHour = {}; 
                vm.selectedEvent = {};
            } else {
                vm.availability.hour = hour.option;
                vm.selectedHour = hour; 

                if (event === null || event === undefined) {
                    if (hour.events) {
                        if (hour.events.length) {
                            vm.selectedEvent = hour.events[0];
                            vm.availability.event_id = hour.events[0].id;
                        } else {
                            vm.selectedEvent = {};
                        }
                    } else {
                        vm.selectedEvent = {};
                    }
                } else {
                    vm.selectedEvent = event;
                    vm.availability.event_id = event.id;
                }
            }
        };
        /**
         * END Selects
         */


        /**
         * Format data
         */
         var resultFormat = function(items) {
             angular.forEach(items, function(item) {
                 if (item.hour !== null) {
                     item.hour_format = moment(item.hour, "HH:mm:ss").format("h:mm A");
                 } else {
                     item.hour_format = "No disponible";
                 }
             });

             return items;
         };

         var findObject = function(array, func) {
            var object = null;
            for (var i = 0; i <= array.length -1; i++) {
                var result = func(array[i]);
                if (result === true) {
                    return array[i];
                }
            }

            return object;
         };

         var defaultData = function(date) {
            zoneColapse = true;

            // Default Date
             vm.availability.date = date;

             // Default num guests
             var find_people = findObject(vm.form.people, function(item) {
                return item.value == vm.selectedPeople.value;
             });

             if (find_people !== null) {
                vm.selectPeople(find_people);
             } else {
                if (vm.form.people.length) {
                    if (vm.form.people[1]) {
                        vm.selectPeople(vm.form.people[1]);
                    } else {
                        vm.selectPeople(vm.form.people[0]);
                    }
                }
             }

             // Default zone
             if (vm.form.zones.length === 1) {
                vm.selectZone(vm.form.zones[0]);
                zoneColapse = false;
             } else {
                var find_zone = findObject(vm.form.zones, function(item) {
                   return item.id == vm.selectedZone.id;
                });

                if (find_zone !== null) {
                   vm.selectZone(find_zone);
                } else {
                   if (vm.form.zones.length) {
                       vm.selectZone(vm.form.zones[0]);
                   }
                }
             }

            // Default hour
            vm.selectHour(utiles.filterHour(vm.form.hours, vm.availability.hour));

            // Date detail
             vm.infoDate = moment(date).format("dddd, D [de] MMMM");

             // vm.searchAvailability();
         };
         /**
          * END Format data
          */

        var InitModule = function(date) {
            vm.case = 1;
            vm.loadingInfo = true;
            vm.loadingData = true;
            vm.message = "Cargando ...";

            availabilityService.getFormatAvailability(date)
                .then(function(response) {
                    vm.form = response.data.data;
                    vm.daysDisabled = vm.form.daysDisabled;
                    vm.date = new Date(vm.form.date.split("-"));
                    defaultData(vm.form.date);

                    vm.loadingData = false;
                }).catch(function() {
                    vm.result.length = 0;
                    vm.message = "Elija otra opcion de busqueda";
                }).finally(function() {
                    vm.loadingInfo = false;
                });
        };

        vm.$watch("date", function(newValue, oldValue) {
            if (! moment(newValue).isSame(oldValue) && ! moment(vm.form.date).isSame(newValue)) {
                var date = moment(vm.date).utc().format("YYYY-MM-DD");
                InitModule(date);
            }
        });

        var searchTemporalReserve = function() {
            var deferred = $q.defer();

            if (base_url.has("edit") ) {
                deferred.reject();
                return deferred.promise;
            }

            availabilityService.searchTemporalReserve()
                .then(function(response) {
                    vm.prevReserve = response.data.data;
                    if (vm.prevReserve !== null) {
                        vm.showPrev = true;
                        vm.prevResToken = vm.prevReserve.reservation.token;
                        deferred.resolve();
                    } else {
                        deferred.reject();
                    }
                }).catch(function(error) {
                    deferred.reject();
                });

            return deferred.promise;
        };

        var cancelTemporalReservation = function() {
            availabilityService.cancelTemporalReservation();
        };

        vm.closePrev = function() {
            InitModule();
            vm.showPrev = false;
            cancelTemporalReservation();
        };

        vm.openPrev = function() {
            redirect(vm.prevResToken);
        };

        vm.promotionDisplay = function(item, evt) {
            vm.promotion.imageUrl = item.image ? "url(" + item.image + ")" : null; 
            vm.promotion.description = item.description || null;
            vm.promotion.display = true;
            angular.element(document.querySelector("#event")).css({top: evt.pageY - (vm.promotion.imageUrl ? 190 : 120) });
        };

        vm.promotionHide = function() {
            vm.promotion.display = false;
        };

        vm.changeMonth = function(date_ini, month, year, instance, select) {
            date_fin = moment(date_ini).endOf('months').format("YYYY-MM-DD");

            var search = {
                date_ini: date_ini,
                date_fin: date_fin
            };

            availabilityService.getDaysDisabled(search)
                .then(function(response) {
                    vm.daysDisabled = response.data.data;
                }).finally(function(){
                    instance.refreshView();
                    if ( moment(date_ini).month() == moment(vm.date).month() ) {
                        select(moment(vm.date).toDate());
                    }
                });
        };

        (function Init() {
            searchTemporalReserve()
                .catch(function() {
                    InitModule();
                });
        })();

    }]);
angular.module("App")
    .controller("confirmedCtrl", ["$scope", "$window", "$location", "availabilityService", "base_url", function(vm, $window, $location, availabilityService, base_url) {
 
        vm.cancel = function() {
            availabilityService.cancelReservation(token)
                .then(function() {
                    redirect();
                }).catch(function() {
                    alert("Ocurrio un problema al intentar cancelar la reservacion, intentelo de nuevo por favor.");
                });
        };

        var redirect = function() {
            $window.location.href = base_url.get("");
        };
    }]);
angular.module("App")
    .controller("errorCtrl", ["$scope", "$timeout", "$window", "$location", "base_url", function(vm, $timeout, $window, $location, base_url) {
        $timeout(function() {
            $window.location.href = base_url.get("");
        }, 3000);
    }]);
angular.module("App")
    .controller("reservationCtrl", ["$scope", "$window", "$location", "availabilityService", "utiles", "base_url", function(vm, $window, $location, service, utiles, base_url) {

        vm.reservation= {};
        vm.reservation.token = token;
        vm.reservation.guest= {};
        vm.reservation.guest_list = [];
        vm.newGuest = "";

        vm.years = [];
        vm.months = [];
        vm.days = [];

        vm.errors = {};

        vm.loading = false;

        vm.addGuest =function(event) {
            if (event.keyCode == 13 || event.keyCode == 32) {
                if (vm.newGuest .trim().length > 2) {
                    vm.reservation.guest_list.push(vm.newGuest .trim());
                    vm.newGuest = "";
                }
            }
        };

        vm.removeGuest = function(i) {
            vm.reservation.guest_list.splice(i, 1);
        };

        vm.clearErrors = function(key) {
            if (Object.prototype.toString.call(vm.errors[key]) == "[object Array]") {
                vm.errors[key].length = 0;
            }
        };

        var redirect = function(key) {
            $window.location.href = base_url.get("/confirmed?key=" + key);
        };

        vm.redirectBase = function() {
            alert("El tiempo para completar la reservacion a terminado.");
            $window.location.href = base_url.url();
        };

        vm.redirectBaseEdit = function() {
            $window.location.href = base_url.getWithParam({edit: 1});
        };

        vm.save = function() {
            vm.loading = true;
            vm.errors = {};
            service.saveReservation(vm.reservation)
                .then(function(response) {
                    redirect(response.data.data);
                }).catch(function(error) {
                    console.log(error);
                    if (error.data === null || error.status == 500) {
                        vm.loading = false;
                        return alert("Ocurrio un problema vuelva a intentarlo.");
                    }
                    vm.errors = error.data.data;
                    vm.loading = false;
                });
        };

        var runYear = function() {
            y = 2000;
            while (y-- > 1940) {
                vm.years.push(y);
            }
        };

        var runMonth = function() {
            vm.months = [
                { id: "01", label: "Enero" },
                { id: "02", label: "Febrero" },
                { id: "03", label: "Marzo" },
                { id: "04", label: "Abril" },
                { id: "05", label: "Mayo" },
                { id: "06", label: "Junio" },
                { id: "07", label: "Julio" },
                { id: "08", label: "Agosto" },
                { id: "09", label: "Septiembre" },
                { id: "10", label: "Octubre" },
                { id: "11", label: "Noviembre" },
                { id: "12", label: "Diciembre" }
            ];
        };

        vm.changeMonth = function(mes) {
            vm.days.length = 0;

            var j = 0;

            if (mes === ""){
                k = 0;
            } else if (mes == 2){
                k = 28;
            } else if (mes == 4 || mes== 6 || mes == 9 || mes == 11) {
                k = 30;
            } else {
                k = 31;
            }

            while (j++ < k) {
                if (j.toString().length === 1) {
                    vm.days.push("0" + j.toString());
                } else {
                    vm.days.push(j.toString());
                }
            }

            if (vm.days.indexOf(vm.day) === -1) {
                vm.day = undefined;
            }

            validDate();
        };

        vm.changeDay = function(mes) {
            validDate();
        };

        vm.changeYear = function(mes) {
            validDate();
        };

        var validDate = function () {
            if (vm.year ===undefined || vm.month ===undefined || vm.day === undefined) {
                vm.reservation.guest.birthdate = null;
            } else {
                var date = new Date(vm.year + "/" + vm.month + "/" + vm.day);

                if ( isNaN(date.getTime()) ) {
                    vm.reservation.guest.birthdate = null;
                } else {
                    vm.reservation.guest.birthdate = moment(date).format("YYYY-MM-DD");
                }
            }
        };

        (function Init() {
            runYear();
            runMonth();
        })();

    }]);
angular.module("App")
    .directive("timeDown", ["$timeout", "$window", "$location", function($timeout, $window, $location) {
        return {
            restrict: 'E',
            scope: {
                expire: "=?",
                finally: "&onFinish"
            },
            template: '<span>{{  time }}</span>',
            link: function(vm, element, attrs) {
                var time, expire;

                vm.$watch("expire", function() {
                    if (vm.expire !== undefined) {
                        expire = ~~Number(vm.expire);
                        time = moment.utc(expire);

                        if (expire <= 0 ) {
                            close();
                        } else {
                            watch();
                        }
                    }
                });

                function watch() {
                   vm.time = time.subtract(1, "seconds").format("mm:ss");
                   if (time.minute() === 0 && time.second() === 0) close(true);
                   $timeout(watch, 1000);
                }

                function close(exeEvent) {
                    if (exeEvent) vm.finally();
                }
            }
        };
    }]);
angular.module("App")
    .filter("dateBS", function() {
        return function(date) {
            return moment(date).format("dddd, D [de] MMMM");
        };
    })
    .filter("timeBS", function() {
        return function(hour) {
            return moment(hour, "HH:mm:ss").format("h:mm A");
        };
    })
    .filter("fullDateBS", function() {
        return function(date_time) {
            return moment(date_time).format("dddd, D [de] MMM YYYY [a las] h:mm A");
        };
    })
    .filter('HtmlToText', function() {
      return function(text) {
        return  text ? String(text).replace(/<[^>]+>/gm, '') : '';
      };
    });
angular.module("App")
    .factory("availabilityService", ["$http", "base_url",function($http, base_url) {     
        return {
            getFormatAvailability: function(date) {
                return $http.get(base_url.url( "/api/availability/formatAvailability"), { params: {date: date}});
            },
            getAvailability: function(data) {
                return $http.get(base_url.url() + "/api/availability/basic", {
                    params: {
                        date: data.date,
                        hour: data.hour,
                        num_guests: data.num_guests,
                        zone_id: data.zone_id,
                        event_id: data.event_id
                    }
                });
            },
            saveTemporalReserve: function(data) {
                return $http.post(base_url.url("/api/reservationtemporal"), data);
            },
            saveReservation: function(data) {
                return $http.post(base_url.url("/api/table/reservation/w"), data);
            },
            cancelReservation: function(reserveToken) {
                return $http.post(base_url.url("/api/table/reservation/cancel/" + reserveToken));
            },
            cancelTemporalReservation: function() {
                return $http.delete(base_url.url("/api/reservationtemporal"));
            },
            searchTemporalReserve: function() {
                return $http.get(base_url.url("/api/reservationtemporal"));
            },
            getDaysDisabled: function(data) {
                return $http.get(base_url.url("/api/availability/daysdisabled"), { params: data});
            },
        };
    }])
    .factory("utiles", [function() {
        return {
            filterHour: function(hours, defaultItem) {
                var timeDefault;

                var now = moment().add((15 - (parseInt(moment().format("mm")) % 15)), "minutes").second(0).millisecond(0);
                var timeDefaultIsEstablished = false;

                var defaultHour = defaultItem ? moment(defaultItem.option, "HH:mm:ss") : null;

                angular.forEach(hours, function(hour) {
                    if (!timeDefaultIsEstablished || defaultHour) {
                        var hourTime = moment(hour.option, "HH:mm:ss");
                        if (hourTime.isSameOrAfter(now) && !timeDefaultIsEstablished) {
                            timeDefault = hour;
                            timeDefaultIsEstablished = true;
                        }
                        if (hourTime.isSame(defaultHour)) {
                            timeDefault = hour;
                        }
                    }
                });

                if (!timeDefault) {
                    if (hours.length > 0) {
                        timeDefault = hours[hours.length - 1];
                    }
                }

                return timeDefault;
            }
        };
    }])
    .factory("base_url", ["$location", function($location) {
        var _base_url = $location.protocol() + "://" + $location.host() + "/w/" + microsite;

        var params = "";
        var c = 0;
        angular.forEach($location.search(), function(value, i) {
            if (i !== "edit") {
                params += (c === 0 ? "" : "&") + i + "=" + value;
                c++;
            }
        });

        params = params === "" ? "" : "#/?" + params;

        return {
            url: function(path) {
                return _base_url + (path ? path : "");
            },
            get: function(path) {
                return _base_url + path + params;
            },
            getWithParam: function(obj_params) {
                var other_params = "";
                angular.forEach(obj_params, function(value, i) {
                    other_params += "&" + i + "=" + value;
                });

                return _base_url + (params === "" ?  "#/?" + other_params : params + other_params);
            },
            has: function(search) {
                return $location.search()[search] !== undefined;
            }
        };
    }]);
$(document).ready(function() {
    $(".header:not(.search)").on("click", function() {

        var body = $(this).parent().find(".body");

        var active = $($.grep($(".row .body"), function(element) {
          return $(element).hasClass("active");
        }));

        if ( !body.is(active) ) {
                body.addClass("active", 200);
                active.removeClass("active", 200);
        }
    });
});

var obtenerIdMicrositio = function() {
    var url = location.href;
    var pos = url.indexOf("/w/");
    var id = url.substr(pos + 3);
    var last_pos = id.indexOf("/");
    id = id.substr(0, last_pos);
    return id;
};
=======
angular.module("App",["ngLocale","ui.bootstrap"]).run(["$location",function(e){var t=e.search().color;if(t){var n=angular.element('<style type="text/css">.bs-color { color: #'+t+" !important; } .bs-bgm { background: #"+t+" !important;color: #fff; } </style>");document.querySelector("head").appendChild(n[0])}}]).run(["$templateCache",function(e){e.put("template/datepicker/day.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr class="nav">\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm date-label" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr class="days">\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center cell-btn" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n        <button type="button" style="min-width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, \'active bs-bgm\': isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1" ng-if="!dt.secondary"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]).config(["$provide",function(e){e.decorator("uibDatepickerDirective",["$delegate",function(e){var t=e[0],n=t.link;return t.$$isolateBindings.monthChanged={attrName:"monthChanged",mode:"&",optional:!0},t.compile=function(){return function(e,t,a,o){n.apply(this,arguments),e.$watch(function(){return o[0].activeDate},function(t,n){if("day"==e.datepickerMode&&(n.getMonth()!==t.getMonth()||n.getYear()!==t.getYear())){var a=moment(t),o=a.format("YYYY-MM-DD"),r=a.format("MM"),i=a.format("YYYY");"function"==typeof e.monthChanged&&e.monthChanged({$date:o,$month:r,$year:i,$instance:e.datepicker,$select:e.select})}},!0)}},e}])}]),angular.module("App").controller("availabilityCtrl",["$scope","$q","availabilityService","utiles","$window","base_url",function(e,t,n,a,o,r){function i(e,t){return e.setHours(0,0,0,0)===t.setHours(0,0,0,0)}function l(e){return new Date(e.split("-"))}e.form={},e.result=[],e.availability={},e.loadingInfo=!1,e.message="",e.selectedPeople={},e.selectedZone={},e.selectedHour={},e.selectedEvent={},e.promotion={},e.minDate=new Date,e.date=new Date;var s=!0;e["case"]=0,e.searchAvailability=function(){var a=t.defer();return e.loadingInfo=!0,n.getAvailability(e.availability).then(function(t){e.result=d(t.data.data),u(),a.resolve(e.result)})["catch"](function(e){a.reject("Error en la busqueda de disponibilidad")})["finally"](function(){e.loadingInfo=!1,e.infoAvailability="Reservaciones disponibles al "+e.infoDate+" a las "+e.availability.hour.option_user+" para "+e.availability.num_guests+" personas."}),a.promise},e.saveTemporalReserve=function(t){e.loadingInfo=!0,n.saveTemporalReserve(t.form).then(function(e){var t=e.data.data.token;c(t)})["catch"](function(e){alert("Ocurrio un problema al tratar de reservar, intentelo de nuevo.")})["finally"](function(){e.loadingInfo=!1})};var c=function(e){o.location.href=r.get("/reserve?key="+e)},u=function(){$("#first").fadeOut(100,function(){$("#two").fadeIn(100)}),e["case"]=2};e.returnSearch=function(){$("#two").fadeOut(100,function(){$("#first").fadeIn(100)}),e["case"]=1},e.disabled=function(t,n){if(e.daysDisabled){for(var a=!1,o=0;o<e.daysDisabled.length;o++)i(l(e.daysDisabled[o]),t)&&(a=!0);return"day"===n&&a}},e.zoneColapse=function(e){s||e.stopPropagation()},e.selectPeople=function(t){e.availability.num_guests=t.value,e.selectedPeople=t},e.selectZone=function(t){e.availability.zone_id=t.id,e.selectedZone=t},e.selectHour=function(t,n){null===t||void 0===t?(e.availability.hour={},e.selectedHour={},e.selectedEvent={}):(e.availability.hour=t,e.selectedHour=t,null===n||void 0===n?t.events&&t.events.length?e.selectedEvent=t.events[0]:e.selectedEvent={}:e.selectedEvent=n)};var d=function(e){return angular.forEach(e,function(e){null!==e.hour?e.hour_format=moment(e.hour,"HH:mm:ss").format("h:mm A"):e.hour_format="No disponible"}),e},f=function(e,t){for(var n=null,a=0;a<=e.length-1;a++){var o=t(e[a]);if(o===!0)return e[a]}return n},m=function(t){s=!0,e.availability.date=t;var n=f(e.form.people,function(t){return t.value==e.selectedPeople.value});if(null!==n?e.selectPeople(n):e.form.people.length&&(e.form.people[1]?e.selectPeople(e.form.people[1]):e.selectPeople(e.form.people[0])),1===e.form.zones.length)e.selectZone(e.form.zones[0]),s=!1;else{var o=f(e.form.zones,function(t){return t.id==e.selectedZone.id});null!==o?e.selectZone(o):e.form.zones.length&&e.selectZone(e.form.zones[0])}e.selectHour(a.filterHour(e.form.hours,e.availability.hour)),e.infoDate=moment(t).format("dddd, D [de] MMMM")},p=function(t){e["case"]=1,e.loadingInfo=!0,e.loadingData=!0,e.message="Cargando ...",n.getFormatAvailability(t).then(function(t){e.form=t.data.data,e.daysDisabled=e.form.daysDisabled,e.date=new Date(e.form.date.split("-")),m(e.form.date),e.loadingData=!1})["catch"](function(){e.result.length=0,e.message="Elija otra opcion de busqueda"})["finally"](function(){e.loadingInfo=!1})};e.$watch("date",function(t,n){if(!moment(t).isSame(n)&&!moment(e.form.date).isSame(t)){var a=moment(e.date).utc().format("YYYY-MM-DD");p(a)}});var v=function(){var a=t.defer();return r.has("edit")?(a.reject(),a.promise):(n.searchTemporalReserve().then(function(t){e.prevReserve=t.data.data,null!==e.prevReserve?(e.showPrev=!0,e.prevResToken=e.prevReserve.reservation.token,a.resolve()):a.reject()})["catch"](function(e){a.reject()}),a.promise)},b=function(){n.cancelTemporalReservation()};e.closePrev=function(){p(),e.showPrev=!1,b()},e.openPrev=function(){c(e.prevResToken)},e.promotionDisplay=function(t,n){e.promotion.imageUrl=t.image?"url("+t.image+")":null,e.promotion.description=t.description||null,e.promotion.display=!0,angular.element(document.querySelector("#event")).css({top:n.pageY-(e.promotion.imageUrl?190:120)})},e.promotionHide=function(){e.promotion.display=!1},e.changeMonth=function(t,a,o,r,i){date_fin=moment(t).endOf("months").format("YYYY-MM-DD");var l={date_ini:t,date_fin:date_fin};n.getDaysDisabled(l).then(function(t){e.daysDisabled=t.data.data})["finally"](function(){r.refreshView(),moment(t).month()==moment(e.date).month()&&i(moment(e.date).toDate())})},function(){v()["catch"](function(){p()})}()}]),angular.module("App").controller("confirmedCtrl",["$scope","$window","$location","availabilityService","base_url",function(e,t,n,a,o){e.cancel=function(){a.cancelReservation(token).then(function(){r()})["catch"](function(){alert("Ocurrio un problema al intentar cancelar la reservacion, intentelo de nuevo por favor.")})};var r=function(){t.location.href=o.get("")}}]),angular.module("App").controller("errorCtrl",["$scope","$timeout","$window","$location","base_url",function(e,t,n,a,o){t(function(){n.location.href=o.get("")},3e3)}]),angular.module("App").controller("reservationCtrl",["$scope","$window","$location","availabilityService","utiles","base_url",function(e,t,n,a,o,r){e.reservation={},e.reservation.token=token,e.reservation.guest={},e.reservation.guest_list=[],e.newGuest="",e.years=[],e.months=[],e.days=[],e.errors={},e.loading=!1,e.addGuest=function(t){13!=t.keyCode&&32!=t.keyCode||e.newGuest.trim().length>2&&(e.reservation.guest_list.push(e.newGuest.trim()),e.newGuest="")},e.removeGuest=function(t){e.reservation.guest_list.splice(t,1)},e.clearErrors=function(t){"[object Array]"==Object.prototype.toString.call(e.errors[t])&&(e.errors[t].length=0)};var i=function(e){t.location.href=r.get("/confirmed?key="+e)};e.redirectBase=function(){alert("El tiempo para completar la reservacion a terminado."),t.location.href=r.url()},e.redirectBaseEdit=function(){t.location.href=r.getWithParam({edit:1})},e.save=function(){e.loading=!0,e.errors={},a.saveReservation(e.reservation).then(function(e){i(e.data.data)})["catch"](function(t){return null===t.data||500==t.status?(e.loading=!1,alert("Ocurrio un problema vuelva a intentarlo.")):(e.errors=t.data.data,void(e.loading=!1))})};var l=function(){for(y=2e3;y-- >1940;)e.years.push(y)},s=function(){e.months=[{id:"01",label:"Enero"},{id:"02",label:"Febrero"},{id:"03",label:"Marzo"},{id:"04",label:"Abril"},{id:"05",label:"Mayo"},{id:"06",label:"Junio"},{id:"07",label:"Julio"},{id:"08",label:"Agosto"},{id:"09",label:"Septiembre"},{id:"10",label:"Octubre"},{id:"11",label:"Noviembre"},{id:"12",label:"Diciembre"}]};e.changeMonth=function(t){e.days.length=0;var n=0;for(""===t?k=0:2==t?k=28:4==t||6==t||9==t||11==t?k=30:k=31;n++<k;)1===n.toString().length?e.days.push("0"+n.toString()):e.days.push(n.toString());e.days.indexOf(e.day)===-1&&(e.day=void 0),c()},e.changeDay=function(e){c()},e.changeYear=function(e){c()};var c=function(){if(void 0===e.year||void 0===e.month||void 0===e.day)e.reservation.guest.birthdate=null;else{var t=new Date(e.year+"/"+e.month+"/"+e.day);isNaN(t.getTime())?e.reservation.guest.birthdate=null:e.reservation.guest.birthdate=moment(t).format("YYYY-MM-DD")}};!function(){l(),s()}()}]),angular.module("App").filter("dateBS",function(){return function(e){return moment(e).format("dddd, D [de] MMMM")}}).filter("timeBS",function(){return function(e){return moment(e,"HH:mm:ss").format("h:mm A")}}).filter("fullDateBS",function(){return function(e){return moment(e).format("dddd, D [de] MMM YYYY [a las] h:mm A")}}).filter("HtmlToText",function(){return function(e){return e?String(e).replace(/<[^>]+>/gm,""):""}}),angular.module("App").directive("timeDown",["$timeout","$window","$location",function(e,t,n){return{restrict:"E",scope:{expire:"=?","finally":"&onFinish"},template:"<span>{{  time }}</span>",link:function(t,n,a){function o(){t.time=i.subtract(1,"seconds").format("mm:ss"),0===i.minute()&&0===i.second()&&r(!0),e(o,1e3)}function r(e){e&&t["finally"]()}var i,l;t.$watch("expire",function(){void 0!==t.expire&&(l=~~Number(t.expire),i=moment.utc(l),l<=0?r():o())})}}}]),angular.module("App").factory("availabilityService",["$http","base_url",function(e,t){return{getFormatAvailability:function(n){return e.get(t.url("/api/availability/formatAvailability"),{params:{date:n}})},getAvailability:function(n){return e.get(t.url()+"/api/availability/basic",{params:{date:n.date,hour:n.hour.option,next_day:n.hour.next_day,num_guests:n.num_guests,zone_id:n.zone_id}})},saveTemporalReserve:function(n){return e.post(t.url("/api/reservationtemporal"),n)},saveReservation:function(n){return e.post(t.url("/api/table/reservation/w"),n)},cancelReservation:function(n){return e.post(t.url("/api/table/reservation/cancel/"+n))},cancelTemporalReservation:function(){return e["delete"](t.url("/api/reservationtemporal"))},searchTemporalReserve:function(){return e.get(t.url("/api/reservationtemporal"))},getDaysDisabled:function(n){return e.get(t.url("/api/availability/daysdisabled"),{params:n})}}}]).factory("utiles",[function(){return{filterHour:function(e,t){var n,a=moment().add(15-parseInt(moment().format("mm"))%15,"minutes").second(0).millisecond(0),o=!1,r=t?moment(t.option,"HH:mm:ss"):null;return angular.forEach(e,function(e){if(!o||r){var t=moment(e.option,"HH:mm:ss");t.isSameOrAfter(a)&&!o&&(n=e,o=!0),t.isSame(r)&&(n=e)}}),n||e.length>0&&(n=e[e.length-1]),n}}}]).factory("base_url",["$location",function(e){var t=e.protocol()+"://"+e.host()+"/w/"+microsite,n="",a=0;return angular.forEach(e.search(),function(e,t){"edit"!==t&&(n+=(0===a?"":"&")+t+"="+e,a++)}),n=""===n?"":"#/?"+n,{url:function(e){return t+(e?e:"")},get:function(e){return t+e+n},getWithParam:function(e){var a="";return angular.forEach(e,function(e,t){a+="&"+t+"="+e}),t+(""===n?"#/?"+a:n+a)},has:function(t){return void 0!==e.search()[t]}}}]),$(document).ready(function(){$(".header:not(.search)").on("click",function(){var e=$(this).parent().find(".body"),t=$($.grep($(".row .body"),function(e){return $(e).hasClass("active")}));e.is(t)||(e.addClass("active",200),t.removeClass("active",200))})});var obtenerIdMicrositio=function(){var e=location.href,t=e.indexOf("/w/"),n=e.substr(t+3),a=n.indexOf("/");return n=n.substr(0,a)};
>>>>>>> developer
